!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BEGIN	lex.yy.c	125;"	d	file:
BREAK	subc.tab.c	/^    BREAK = 266,$/;"	e	enum:yytokentype	file:
BREAK	subc.tab.h	/^    BREAK = 266,$/;"	e	enum:yytokentype
CC	Makefile	/^CC = gcc$/;"	m
CHAR_CONST	subc.tab.c	/^    CHAR_CONST = 278,$/;"	e	enum:yytokentype	file:
CHAR_CONST	subc.tab.h	/^    CHAR_CONST = 278,$/;"	e	enum:yytokentype
COMMENT	lex.yy.c	565;"	d	file:
COMPILE_OPTION	Makefile	/^COMPILE_OPTION = -g$/;"	m
CONTINUE	subc.tab.c	/^    CONTINUE = 267,$/;"	e	enum:yytokentype	file:
CONTINUE	subc.tab.h	/^    CONTINUE = 267,$/;"	e	enum:yytokentype
DECL_CONST	subc.h	16;"	d
DECL_FUNC	subc.h	17;"	d
DECL_TYPE	subc.h	18;"	d
DECL_TYPE_ARRAY	subc.h	22;"	d
DECL_TYPE_CHAR	subc.h	21;"	d
DECL_TYPE_INT	subc.h	19;"	d
DECL_TYPE_PTR	subc.h	23;"	d
DECL_TYPE_STRUCT	subc.h	24;"	d
DECL_TYPE_VOID	subc.h	20;"	d
DECL_VAR	subc.h	15;"	d
DECOP	subc.tab.c	/^    DECOP = 273,$/;"	e	enum:yytokentype	file:
DECOP	subc.tab.h	/^    DECOP = 273,$/;"	e	enum:yytokentype
ECHO	lex.yy.c	661;"	d	file:
ELSE	subc.tab.c	/^    ELSE = 263,$/;"	e	enum:yytokentype	file:
ELSE	subc.tab.h	/^    ELSE = 263,$/;"	e	enum:yytokentype
EOB_ACT_CONTINUE_SCAN	lex.yy.c	173;"	d	file:
EOB_ACT_END_OF_FILE	lex.yy.c	174;"	d	file:
EOB_ACT_LAST_MATCH	lex.yy.c	175;"	d	file:
EQUOP	subc.tab.c	/^    EQUOP = 271,$/;"	e	enum:yytokentype	file:
EQUOP	subc.tab.h	/^    EQUOP = 271,$/;"	e	enum:yytokentype
EXIT_SUCCESS	subc.tab.c	304;"	d	file:
EXIT_SUCCESS	subc.tab.c	332;"	d	file:
FLEXINT_H	lex.yy.c	29;"	d	file:
FLEX_BETA	lex.yy.c	13;"	d	file:
FLEX_SCANNER	lex.yy.c	8;"	d	file:
FOR	subc.tab.c	/^    FOR = 265,$/;"	e	enum:yytokentype	file:
FOR	subc.tab.h	/^    FOR = 265,$/;"	e	enum:yytokentype
HASH_TABLE_SIZE	hash.c	10;"	d	file:
ID	subc.tab.c	/^    ID = 275,$/;"	e	enum:yytokentype	file:
ID	subc.tab.h	/^    ID = 275,$/;"	e	enum:yytokentype
IF	subc.tab.c	/^    IF = 262,$/;"	e	enum:yytokentype	file:
IF	subc.tab.h	/^    IF = 262,$/;"	e	enum:yytokentype
IFSIMPLE	subc.tab.c	/^    IFSIMPLE = 279$/;"	e	enum:yytokentype	file:
IFSIMPLE	subc.tab.h	/^    IFSIMPLE = 279$/;"	e	enum:yytokentype
IMCOPATIBLE_COMPARE	subc.h	37;"	d
INCOMPLETE_STRUCT	subc.h	34;"	d
INCOP	subc.tab.c	/^    INCOP = 272,$/;"	e	enum:yytokentype	file:
INCOP	subc.tab.h	/^    INCOP = 272,$/;"	e	enum:yytokentype
INITIAL	lex.yy.c	564;"	d	file:
INT16_MAX	lex.yy.c	71;"	d	file:
INT16_MIN	lex.yy.c	62;"	d	file:
INT32_MAX	lex.yy.c	74;"	d	file:
INT32_MIN	lex.yy.c	65;"	d	file:
INT8_MAX	lex.yy.c	68;"	d	file:
INT8_MIN	lex.yy.c	59;"	d	file:
INTEGER_CONST	subc.tab.c	/^    INTEGER_CONST = 276,$/;"	e	enum:yytokentype	file:
INTEGER_CONST	subc.tab.h	/^    INTEGER_CONST = 276,$/;"	e	enum:yytokentype
LEX	Makefile	/^LEX = flex$/;"	m
LHS_NOT_VAR	subc.h	31;"	d
LHS_RHS_NOT_SAME_TYPE	subc.h	30;"	d
LINK_OPTION	Makefile	/^LINK_OPTION = -lfl$/;"	m
LOGICAL_AND	subc.tab.c	/^    LOGICAL_AND = 269,$/;"	e	enum:yytokentype	file:
LOGICAL_AND	subc.tab.h	/^    LOGICAL_AND = 269,$/;"	e	enum:yytokentype
LOGICAL_OR	subc.tab.c	/^    LOGICAL_OR = 268,$/;"	e	enum:yytokentype	file:
LOGICAL_OR	subc.tab.h	/^    LOGICAL_OR = 268,$/;"	e	enum:yytokentype
MULTIPLE_RETURN_TYPE	subc.h	36;"	d
NOT_ARRAY	subc.h	50;"	d
NOT_CHAR	subc.h	49;"	d
NOT_COMPUTABLE	subc.h	38;"	d
NOT_CONST	subc.h	44;"	d
NOT_CONST_VAR	subc.h	40;"	d
NOT_DECLARED	subc.h	28;"	d
NOT_FORMAL_ARGS	subc.h	42;"	d
NOT_FUNC	subc.h	45;"	d
NOT_INT	subc.h	47;"	d
NOT_INT_CHAR	subc.h	53;"	d
NOT_INT_CHAR_PTR	subc.h	54;"	d
NOT_PROPER_TYPE	subc.h	41;"	d
NOT_PTR	subc.h	51;"	d
NOT_STRUCT	subc.h	52;"	d
NOT_STRUCT_FIELD	subc.h	33;"	d
NOT_TYPE	subc.h	46;"	d
NOT_VAR	subc.h	39;"	d
NOT_VAR_CONST	subc.h	55;"	d
NOT_VOID	subc.h	48;"	d
REDECL	subc.h	29;"	d
REDUCE	subc.tab.c	/^void 	REDUCE( char* s)$/;"	f
REJECT	lex.yy.c	543;"	d	file:
RELOP	subc.tab.c	/^    RELOP = 270,$/;"	e	enum:yytokentype	file:
RELOP	subc.tab.h	/^    RELOP = 270,$/;"	e	enum:yytokentype
RETURN	subc.tab.c	/^    RETURN = 261,$/;"	e	enum:yytokentype	file:
RETURN	subc.tab.h	/^    RETURN = 261,$/;"	e	enum:yytokentype
RHS_NOT_VAR_CONST	subc.h	32;"	d
STRING	subc.tab.c	/^    STRING = 277,$/;"	e	enum:yytokentype	file:
STRING	subc.tab.h	/^    STRING = 277,$/;"	e	enum:yytokentype
STRUCT	subc.tab.c	/^    STRUCT = 260,$/;"	e	enum:yytokentype	file:
STRUCT	subc.tab.h	/^    STRUCT = 260,$/;"	e	enum:yytokentype
STRUCTOP	subc.tab.c	/^    STRUCTOP = 274,$/;"	e	enum:yytokentype	file:
STRUCTOP	subc.tab.h	/^    STRUCTOP = 274,$/;"	e	enum:yytokentype
SUCCESS	subc.h	27;"	d
TYPE	subc.tab.c	/^    TYPE = 258,$/;"	e	enum:yytokentype	file:
TYPE	subc.tab.h	/^    TYPE = 258,$/;"	e	enum:yytokentype
UINT16_MAX	lex.yy.c	80;"	d	file:
UINT32_MAX	lex.yy.c	83;"	d	file:
UINT8_MAX	lex.yy.c	77;"	d	file:
VOID	subc.tab.c	/^    VOID = 259,$/;"	e	enum:yytokentype	file:
VOID	subc.tab.h	/^    VOID = 259,$/;"	e	enum:yytokentype
WHILE	subc.tab.c	/^    WHILE = 264,$/;"	e	enum:yytokentype	file:
WHILE	subc.tab.h	/^    WHILE = 264,$/;"	e	enum:yytokentype
WRONG_RETURN_VALUE	subc.h	35;"	d
YACC	Makefile	/^YACC = bison$/;"	m
YACC_OPTION	Makefile	/^YACC_OPTION = -vd$/;"	m
YYABORT	subc.tab.c	710;"	d	file:
YYACCEPT	subc.tab.c	709;"	d	file:
YYBACKUP	subc.tab.c	716;"	d	file:
YYBISON	subc.tab.c	44;"	d	file:
YYBISON_VERSION	subc.tab.c	47;"	d	file:
YYCASE_	subc.tab.c	1057;"	d	file:
YYCASE_	subc.tab.c	1067;"	d	file:
YYCOPY	subc.tab.c	396;"	d	file:
YYCOPY	subc.tab.c	399;"	d	file:
YYCOPY_NEEDED	subc.tab.c	371;"	d	file:
YYDEBUG	subc.tab.c	104;"	d	file:
YYDEBUG	subc.tab.h	37;"	d
YYDPRINTF	subc.tab.c	747;"	d	file:
YYDPRINTF	subc.tab.c	862;"	d	file:
YYEMPTY	subc.tab.c	706;"	d	file:
YYEOF	subc.tab.c	707;"	d	file:
YYERRCODE	subc.tab.c	735;"	d	file:
YYERROR	subc.tab.c	711;"	d	file:
YYERROR_VERBOSE	subc.tab.c	92;"	d	file:
YYERROR_VERBOSE	subc.tab.c	93;"	d	file:
YYERROR_VERBOSE	subc.tab.c	95;"	d	file:
YYFINAL	subc.tab.c	412;"	d	file:
YYFPRINTF	subc.tab.c	744;"	d	file:
YYFREE	subc.tab.c	342;"	d	file:
YYINITDEPTH	subc.tab.c	871;"	d	file:
YYLAST	subc.tab.c	414;"	d	file:
YYMALLOC	subc.tab.c	336;"	d	file:
YYMAXDEPTH	subc.tab.c	882;"	d	file:
YYMAXUTOK	subc.tab.c	428;"	d	file:
YYNNTS	subc.tab.c	419;"	d	file:
YYNRULES	subc.tab.c	421;"	d	file:
YYNSTATES	subc.tab.c	423;"	d	file:
YYNTOKENS	subc.tab.c	417;"	d	file:
YYPACT_NINF	subc.tab.c	514;"	d	file:
YYPOPSTACK	subc.tab.c	1182;"	d	file:
YYPULL	subc.tab.c	59;"	d	file:
YYPURE	subc.tab.c	53;"	d	file:
YYPUSH	subc.tab.c	56;"	d	file:
YYRECOVERING	subc.tab.c	714;"	d	file:
YYSIZE_MAXIMUM	subc.tab.c	215;"	d	file:
YYSIZE_T	subc.tab.c	204;"	d	file:
YYSIZE_T	subc.tab.c	206;"	d	file:
YYSIZE_T	subc.tab.c	209;"	d	file:
YYSIZE_T	subc.tab.c	211;"	d	file:
YYSKELETON_NAME	subc.tab.c	50;"	d	file:
YYSTACK_ALLOC	subc.tab.c	290;"	d	file:
YYSTACK_ALLOC	subc.tab.c	294;"	d	file:
YYSTACK_ALLOC	subc.tab.c	299;"	d	file:
YYSTACK_ALLOC	subc.tab.c	322;"	d	file:
YYSTACK_ALLOC_MAXIMUM	subc.tab.c	319;"	d	file:
YYSTACK_ALLOC_MAXIMUM	subc.tab.c	325;"	d	file:
YYSTACK_BYTES	subc.tab.c	367;"	d	file:
YYSTACK_FREE	subc.tab.c	313;"	d	file:
YYSTACK_FREE	subc.tab.c	323;"	d	file:
YYSTACK_GAP_MAXIMUM	subc.tab.c	363;"	d	file:
YYSTACK_RELOCATE	subc.tab.c	378;"	d	file:
YYSTATE	lex.yy.c	132;"	d	file:
YYSTYPE	subc.tab.c	/^typedef union YYSTYPE YYSTYPE;$/;"	t	typeref:union:YYSTYPE	file:
YYSTYPE	subc.tab.c	/^union YYSTYPE$/;"	u	file:
YYSTYPE	subc.tab.h	/^typedef union YYSTYPE YYSTYPE;$/;"	t	typeref:union:YYSTYPE
YYSTYPE	subc.tab.h	/^union YYSTYPE$/;"	u
YYSTYPE_IS_DECLARED	subc.tab.c	160;"	d	file:
YYSTYPE_IS_DECLARED	subc.tab.h	93;"	d
YYSTYPE_IS_TRIVIAL	subc.tab.c	159;"	d	file:
YYSTYPE_IS_TRIVIAL	subc.tab.h	92;"	d
YYTABLES_NAME	lex.yy.c	2221;"	d	file:
YYTABLE_NINF	subc.tab.c	519;"	d	file:
YYTERROR	subc.tab.c	734;"	d	file:
YYTOKENTYPE	subc.tab.c	112;"	d	file:
YYTOKENTYPE	subc.tab.h	45;"	d
YYTRANSLATE	subc.tab.c	430;"	d	file:
YYUNDEFTOK	subc.tab.c	427;"	d	file:
YYUSE	subc.tab.c	258;"	d	file:
YYUSE	subc.tab.c	260;"	d	file:
YY_	subc.tab.c	221;"	d	file:
YY_	subc.tab.c	225;"	d	file:
YY_ATTRIBUTE	subc.tab.c	233;"	d	file:
YY_ATTRIBUTE	subc.tab.c	235;"	d	file:
YY_ATTRIBUTE_PURE	subc.tab.c	240;"	d	file:
YY_ATTRIBUTE_UNUSED	subc.tab.c	244;"	d	file:
YY_AT_BOL	lex.yy.c	340;"	d	file:
YY_BREAK	lex.yy.c	740;"	d	file:
YY_BUFFER_EOF_PENDING	lex.yy.c	256;"	d	file:
YY_BUFFER_NEW	lex.yy.c	244;"	d	file:
YY_BUFFER_NORMAL	lex.yy.c	245;"	d	file:
YY_BUFFER_STATE	lex.yy.c	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state	file:
YY_BUF_SIZE	lex.yy.c	149;"	d	file:
YY_BUF_SIZE	lex.yy.c	151;"	d	file:
YY_CHAR	lex.yy.c	/^typedef unsigned char YY_CHAR;$/;"	t	file:
YY_CURRENT_BUFFER	lex.yy.c	272;"	d	file:
YY_CURRENT_BUFFER_LVALUE	lex.yy.c	279;"	d	file:
YY_DECL	lex.yy.c	728;"	d	file:
YY_DECL_IS_OURS	lex.yy.c	724;"	d	file:
YY_DO_BEFORE_ACTION	lex.yy.c	371;"	d	file:
YY_END_OF_BUFFER	lex.yy.c	379;"	d	file:
YY_END_OF_BUFFER_CHAR	lex.yy.c	140;"	d	file:
YY_EXIT_FAILURE	lex.yy.c	2017;"	d	file:
YY_EXTRA_TYPE	lex.yy.c	576;"	d	file:
YY_FATAL_ERROR	lex.yy.c	715;"	d	file:
YY_FLEX_MAJOR_VERSION	lex.yy.c	9;"	d	file:
YY_FLEX_MINOR_VERSION	lex.yy.c	10;"	d	file:
YY_FLEX_SUBMINOR_VERSION	lex.yy.c	11;"	d	file:
YY_FLUSH_BUFFER	lex.yy.c	308;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	subc.tab.c	265;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	subc.tab.c	275;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	subc.tab.c	269;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	subc.tab.c	276;"	d	file:
YY_INITIAL_VALUE	subc.tab.c	272;"	d	file:
YY_INITIAL_VALUE	subc.tab.c	279;"	d	file:
YY_INPUT	lex.yy.c	668;"	d	file:
YY_INT_ALIGNED	lex.yy.c	4;"	d	file:
YY_LESS_LINENO	lex.yy.c	177;"	d	file:
YY_LINENO_REWIND_TO	lex.yy.c	178;"	d	file:
YY_LOCATION_PRINT	subc.tab.c	755;"	d	file:
YY_MORE_ADJ	lex.yy.c	545;"	d	file:
YY_NEW_FILE	lex.yy.c	138;"	d	file:
YY_NULL	lex.yy.c	112;"	d	file:
YY_NULLPTR	subc.tab.c	84;"	d	file:
YY_NULLPTR	subc.tab.c	86;"	d	file:
YY_NUM_RULES	lex.yy.c	378;"	d	file:
YY_READ_BUF_SIZE	lex.yy.c	650;"	d	file:
YY_READ_BUF_SIZE	lex.yy.c	652;"	d	file:
YY_REDUCE_PRINT	subc.tab.c	852;"	d	file:
YY_REDUCE_PRINT	subc.tab.c	865;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	lex.yy.c	546;"	d	file:
YY_RULE_SETUP	lex.yy.c	743;"	d	file:
YY_SC_TO_UI	lex.yy.c	119;"	d	file:
YY_STACK_PRINT	subc.tab.c	821;"	d	file:
YY_STACK_PRINT	subc.tab.c	864;"	d	file:
YY_START	lex.yy.c	131;"	d	file:
YY_START_STACK_INCR	lex.yy.c	710;"	d	file:
YY_STATE_BUF_SIZE	lex.yy.c	157;"	d	file:
YY_STATE_EOF	lex.yy.c	135;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	lex.yy.c	197;"	d	file:
YY_SYMBOL_PRINT	subc.tab.c	759;"	d	file:
YY_SYMBOL_PRINT	subc.tab.c	863;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	lex.yy.c	160;"	d	file:
YY_TYPEDEF_YY_SIZE_T	lex.yy.c	165;"	d	file:
YY_USER_ACTION	lex.yy.c	735;"	d	file:
YY_USE_CONST	lex.yy.c	100;"	d	file:
YY_USE_CONST	lex.yy.c	93;"	d	file:
YY_YY_SUBC_TAB_H_INCLUDED	subc.tab.c	101;"	d	file:
YY_YY_SUBC_TAB_H_INCLUDED	subc.tab.h	34;"	d
_Noreturn	subc.tab.c	250;"	d	file:
_Noreturn	subc.tab.c	252;"	d	file:
__STDC_LIMIT_MACROS	lex.yy.c	39;"	d	file:
__SUBC_H__	subc.h	8;"	d
a	open_test/mul.c	/^int a;$/;"	v
a	open_test/scope.c	/^int a;$/;"	v
a	open_test/var_def.c	/^int a;$/;"	v
addArg	symbol.c	/^struct node* addArg(struct decl* argDecl){$/;"	f
addToHead	symbol.c	/^void addToHead(struct node **head, struct node *newNode) {$/;"	f
addToTail	symbol.c	/^void addToTail(struct node **head, struct node *newNode) {$/;"	f
alloca	subc.tab.c	297;"	d	file:
and_expr	subc.y	/^and_expr:	and_list	$/;"	l
and_list	subc.y	/^and_list:	and_list LOGICAL_AND binary	$/;"	l
argListHead	symbol.c	/^static struct node *argListHead;$/;"	v	typeref:struct:node	file:
args	subc.y	/^args:		expr	$/;"	l
binary	subc.y	/^binary:		binary RELOP binary	$/;"	l
c	open_test/str_op.c	/^		char *c;$/;"	m	struct:str2::str3	file:
c	open_test/str_op.c	/^	char *c;$/;"	m	struct:str2	file:
c	open_test/str_op.c	/^	char *c;$/;"	m	struct:str3	file:
c	open_test/str_op.c	/^	char c;$/;"	m	struct:str1	file:
calcCharSize	codeGen.c	/^int calcCharSize(){$/;"	f
calcIntSize	codeGen.c	/^int calcIntSize(){$/;"	f
calcOffset	codeGen.c	/^void calcOffset(struct node *curSsTop, struct decl *curDecl){$/;"	f
calcPtrSize	codeGen.c	/^int calcPtrSize(){$/;"	f
changeSSTopPnting	symbol.c	/^void changeSSTopPnting(struct ste* newSte){$/;"	f
charValue	subc.h	/^	char		*charValue;$/;"	m	struct:decl
checkCompatible	symbol.c	/^int checkCompatible(struct decl* formalType, struct decl* argType){$/;"	f
checkFunctionCall	symbol.c	/^struct decl* checkFunctionCall(struct decl* func, struct node* args){$/;"	f
checkIsArray	symbol.c	/^int checkIsArray(struct decl* declPtr){$/;"	f
checkIsChar	symbol.c	/^int checkIsChar(struct decl* declPtr){$/;"	f
checkIsConst	symbol.c	/^int checkIsConst(struct decl* declPtr){$/;"	f
checkIsFunc	symbol.c	/^int checkIsFunc(struct decl* declPtr){$/;"	f
checkIsInt	symbol.c	/^int checkIsInt(struct decl* declPtr){$/;"	f
checkIsIntOrChar	symbol.c	/^int checkIsIntOrChar(struct decl* declPtr){$/;"	f
checkIsListEmpty	symbol.c	/^int checkIsListEmpty (struct node **head){$/;"	f
checkIsPtr	symbol.c	/^int checkIsPtr(struct decl* declPtr){$/;"	f
checkIsRedecl	symbol.c	/^int checkIsRedecl(struct id* name){$/;"	f
checkIsStruct	symbol.c	/^int checkIsStruct(struct decl* declPtr){$/;"	f
checkIsTail	symbol.c	/^int checkIsTail (struct node **head, struct node* targetNode){$/;"	f
checkIsType	symbol.c	/^int checkIsType(struct decl* declPtr){$/;"	f
checkIsVar	symbol.c	/^int checkIsVar(struct decl* declPtr){$/;"	f
checkSameType	symbol.c	/^int checkSameType(struct decl* typeDecl1, struct decl* typeDecl2){$/;"	f
comment_depth	lex.yy.c	/^static int comment_depth = 0;$/;"	v	file:
compound_stmt	subc.y	/^compound_stmt:	'{' $/;"	l
const_expr	subc.y	/^const_expr:	expr	$/;"	l
data	hash.c	/^   struct id *data;$/;"	m	struct:nlist	typeref:struct:nlist::id	file:
data	subc.h	/^	void		*data;	$/;"	m	struct:node
decl	subc.h	/^	struct decl	*decl;$/;"	m	struct:ste	typeref:struct:ste::decl
decl	subc.h	/^struct decl {$/;"	s
declClass	subc.h	/^	int		declClass;$/;"	m	struct:decl
declPtr	subc.tab.c	/^        struct decl	*declPtr;$/;"	m	union:YYSTYPE	typeref:struct:YYSTYPE::decl	file:
declPtr	subc.tab.h	/^        struct decl	*declPtr;$/;"	m	union:YYSTYPE	typeref:struct:YYSTYPE::decl
declare	symbol.c	/^int declare(struct id* name, struct decl* type){$/;"	f
def	subc.y	/^def:	type_specifier pointers ID ';'	$/;"	l
def_list	subc.y	/^def_list:	def_list def	$/;"	l
elementVar	subc.h	/^	struct decl	*elementVar;$/;"	m	struct:decl	typeref:struct:decl::decl
enter	hash.c	/^struct id *enter(int lextype, char *name, int length) {$/;"	f
expr	subc.y	/^expr:		unary '=' expr	$/;"	l
expr_e	subc.y	/^expr_e:		expr	$/;"	l
ext_def	subc.y	/^ext_def:	type_specifier pointers ID ';' $/;"	l
ext_def_list	subc.y	/^ext_def_list:	ext_def_list ext_def	$/;"	l
fieldList	subc.h	/^	struct ste	*fieldList;$/;"	m	struct:decl	typeref:struct:decl::ste
fileName	lex.yy.c	/^static char* fileName ;$/;"	v	file:
findDecl	symbol.c	/^struct decl* findDecl(struct id* name){$/;"	f
findDeclByStr	symbol.c	/^struct decl* findDeclByStr(char* name){$/;"	f
flex_int16_t	lex.yy.c	/^typedef int16_t flex_int16_t;$/;"	t	file:
flex_int16_t	lex.yy.c	/^typedef short int flex_int16_t;$/;"	t	file:
flex_int32_t	lex.yy.c	/^typedef int flex_int32_t;$/;"	t	file:
flex_int32_t	lex.yy.c	/^typedef int32_t flex_int32_t;$/;"	t	file:
flex_int8_t	lex.yy.c	/^typedef int8_t flex_int8_t;$/;"	t	file:
flex_int8_t	lex.yy.c	/^typedef signed char flex_int8_t;$/;"	t	file:
flex_uint16_t	lex.yy.c	/^typedef uint16_t flex_uint16_t;$/;"	t	file:
flex_uint16_t	lex.yy.c	/^typedef unsigned short int flex_uint16_t;$/;"	t	file:
flex_uint32_t	lex.yy.c	/^typedef uint32_t flex_uint32_t;$/;"	t	file:
flex_uint32_t	lex.yy.c	/^typedef unsigned int flex_uint32_t;$/;"	t	file:
flex_uint8_t	lex.yy.c	/^typedef uint8_t flex_uint8_t;$/;"	t	file:
flex_uint8_t	lex.yy.c	/^typedef unsigned char flex_uint8_t; $/;"	t	file:
formals	subc.h	/^	struct ste	*formals;$/;"	m	struct:decl	typeref:struct:decl::ste
func1	open_test/func_op.c	/^int func1(int a, char b) {$/;"	f
func2	open_test/func_op.c	/^int func2(void) {$/;"	f
func3	open_test/func_op.c	/^void func3(int *a, int b) {$/;"	f
func_decl	subc.y	/^func_decl:	type_specifier pointers ID '(' ')'	$/;"	l
getTail	symbol.c	/^struct node* getTail(struct node** head){$/;"	f
get_file_name	lex.yy.c	/^char* get_file_name(){$/;"	f
hash	hash.c	/^unsigned hash(char *name) {$/;"	f
hashTable	hash.c	/^static struct nlist *hashTable[HASH_TABLE_SIZE];$/;"	v	typeref:struct:nlist	file:
i	open_test/str_op.c	/^		int *i;$/;"	m	struct:str2::str3	file:
i	open_test/str_op.c	/^	int *i;$/;"	m	struct:str2	file:
i	open_test/str_op.c	/^	int *i;$/;"	m	struct:str3	file:
i	open_test/str_op.c	/^	int i;$/;"	m	struct:str1	file:
id	subc.h	/^struct id {$/;"	s
idPtr	subc.tab.c	/^        struct id	*idPtr;$/;"	m	union:YYSTYPE	typeref:struct:YYSTYPE::id	file:
idPtr	subc.tab.h	/^        struct id	*idPtr;$/;"	m	union:YYSTYPE	typeref:struct:YYSTYPE::id
initType	symbol.c	/^void initType(){$/;"	f
intVal	subc.tab.c	/^        int		intVal;$/;"	m	union:YYSTYPE	file:
intVal	subc.tab.h	/^        int		intVal;$/;"	m	union:YYSTYPE
leng	subc.h	/^      int leng;$/;"	m	struct:id
lextype	subc.h	/^      int lextype;$/;"	m	struct:id
lineno	lex.yy.c	/^static int lineno = 1;$/;"	v	file:
local_defs	subc.y	/^local_defs:	def_list	$/;"	l
lookup	hash.c	/^struct id *lookup(char *name) {$/;"	f
lookupSymbol	symbol.c	/^struct ste* lookupSymbol(struct ste* head, struct id* name){$/;"	f
main	lex.yy.c	/^int main(int argc, char* argv[])$/;"	f
main	open_test/func_op.c	/^int main(void) {$/;"	f
main	open_test/mul.c	/^int main() {$/;"	f
main	open_test/operand.c	/^int main(){$/;"	f
main	open_test/ptr_op.c	/^int main(void) {$/;"	f
main	open_test/scope.c	/^int main() {$/;"	f
main	open_test/str_op.c	/^int main(void) {$/;"	f
main	open_test/test.c	/^int main(){$/;"	f
main	open_test/var_def.c	/^int main() {$/;"	f
makeArrDecl	symbol.c	/^struct decl* makeArrDecl(struct decl* elementType){$/;"	f
makeCharConstDecl	symbol.c	/^struct decl* makeCharConstDecl(char* str){$/;"	f
makeConstDecl	symbol.c	/^struct decl* makeConstDecl(struct decl* arrDecl, int intValue){$/;"	f
makeFuncDecl	symbol.c	/^struct decl* makeFuncDecl(){$/;"	f
makeIntConstDecl	symbol.c	/^struct decl* makeIntConstDecl(int integer){$/;"	f
makePtrDecl	symbol.c	/^struct decl* makePtrDecl(struct decl* pointingType){$/;"	f
makeSte	symbol.c	/^struct ste* makeSte(struct id* namePtr, struct decl* declPtr) {$/;"	f
makeStructDecl	symbol.c	/^struct decl* makeStructDecl(struct ste* fieldList){$/;"	f
makeTypeDecl	symbol.c	/^struct decl* makeTypeDecl(int typeClass){$/;"	f
makeVarDecl	symbol.c	/^struct decl* makeVarDecl(struct decl* varType){$/;"	f
minusType	symbol.c	/^struct decl* minusType(struct decl* typeDecl1, struct decl* typeDecl2){$/;"	f
name	subc.h	/^	struct id	*name;$/;"	m	struct:ste	typeref:struct:ste::id
name	subc.h	/^      char *name;$/;"	m	struct:id
next	hash.c	/^   struct nlist *next;$/;"	m	struct:nlist	typeref:struct:nlist::nlist	file:
next	subc.h	/^	struct decl	*next;$/;"	m	struct:decl	typeref:struct:decl::decl
next	subc.h	/^	struct node	*next;$/;"	m	struct:node	typeref:struct:node::node
nlist	hash.c	/^struct nlist {$/;"	s	file:
node	subc.h	/^struct node {$/;"	s
nodePtr	subc.tab.c	/^        struct node 	*nodePtr;$/;"	m	union:YYSTYPE	typeref:struct:YYSTYPE::node	file:
nodePtr	subc.tab.h	/^        struct node 	*nodePtr;$/;"	m	union:YYSTYPE	typeref:struct:YYSTYPE::node
numIndex	subc.h	/^	int		numIndex;$/;"	m	struct:decl
offset	subc.h	/^    int     offset;$/;"	m	struct:decl
or_expr	subc.y	/^or_expr:	or_list		$/;"	l
or_list	subc.y	/^or_list:	or_list LOGICAL_OR and_expr	$/;"	l
param_decl	subc.y	/^param_decl: type_specifier pointers ID	$/;"	l
param_list	subc.y	/^param_list:	param_decl	$/;"	l
plusType	symbol.c	/^struct decl* plusType(struct decl* typeDecl1, struct decl* typeDecl2){$/;"	f
pointers	subc.y	/^pointers: 	'*'	$/;"	l
popScope	symbol.c	/^struct ste* popScope(){$/;"	f
prev	subc.h	/^	struct node	*prev;$/;"	m	struct:node	typeref:struct:node::node
prev	subc.h	/^	struct ste 	*prev;$/;"	m	struct:ste	typeref:struct:ste::ste
printArgList	symbol.c	/^void printArgList(struct node **head){$/;"	f
printLex	lex.yy.c	/^void printLex(char* token){$/;"	f
printList	symbol.c	/^void printList(struct node **head){$/;"	f
printSymbolTable	symbol.c	/^void printSymbolTable(struct ste* head){$/;"	f
program	subc.y	/^program:	ext_def_list	$/;"	l
ptrTo	subc.h	/^	struct decl	*ptrTo;$/;"	m	struct:decl	typeref:struct:decl::decl
pushScope	symbol.c	/^void pushScope(){$/;"	f
pushSteList	symbol.c	/^int pushSteList(struct ste* steList){$/;"	f
read_line	lex.yy.c	/^int read_line()$/;"	f
recurReverSte	symbol.c	/^struct ste* recurReverSte(struct ste* steList){$/;"	f
removeFromHead	symbol.c	/^void removeFromHead(struct node **head){$/;"	f
removeTopSte	symbol.c	/^void removeTopSte(){$/;"	f
resetArgList	symbol.c	/^void resetArgList(){$/;"	f
resetList	symbol.c	/^void resetList (struct node **head){$/;"	f
resetScopeSize	codeGen.c	/^void resetScopeSize(struct node *curSsTop){$/;"	f
returnType	subc.h	/^	struct decl	*returnType;$/;"	m	struct:decl	typeref:struct:decl::decl
reverseSte	symbol.c	/^struct ste* reverseSte(struct ste* steList){$/;"	f
scope	subc.h	/^	struct node 	*scope;$/;"	m	struct:ste	typeref:struct:ste::node
scope	subc.h	/^	struct ste	**scope;$/;"	m	struct:decl	typeref:struct:decl::ste
semErr	symbol.c	/^void semErr(int errNum){$/;"	f
setArrSize	codeGen.c	/^void setArrSize(struct decl* arrType){$/;"	f
setScopeSize	codeGen.c	/^void setScopeSize(struct node *curSsTop,struct decl* curDecl){$/;"	f
setSteScope	symbol.c	/^void setSteScope(){$/;"	f
setStructSize	codeGen.c	/^void setStructSize(struct node *curSsTop, struct decl* structTypeDecl){$/;"	f
setVarSize	codeGen.c	/^int setVarSize(struct decl* varDecl){$/;"	f
short	subc.tab.c	175;"	d	file:
size	subc.h	/^	int		size;$/;"	m	struct:decl
size	subc.h	/^    int         size; \/\/for scope stack$/;"	m	struct:node
ssTop	symbol.c	/^static struct node *ssTop;$/;"	v	typeref:struct:node	file:
st	open_test/str_op.c	/^	} st;$/;"	m	struct:str2	typeref:struct:str2::str3	file:
ste	subc.h	/^struct ste {$/;"	s
stePtr	subc.tab.c	/^        struct ste	*stePtr;$/;"	m	union:YYSTYPE	typeref:struct:YYSTYPE::ste	file:
stePtr	subc.tab.h	/^        struct ste	*stePtr;$/;"	m	union:YYSTYPE	typeref:struct:YYSTYPE::ste
stmt	subc.y	/^stmt:		expr ';'	$/;"	l
stmt_list	subc.y	/^stmt_list:	stmt_list stmt$/;"	l
str1	open_test/str_op.c	/^struct str1 {$/;"	s	file:
str2	open_test/str_op.c	/^struct str2 {$/;"	s	file:
str3	open_test/str_op.c	/^	struct str3 {$/;"	s	struct:str2	file:
str3	open_test/str_op.c	/^struct str3 { \/* error, redeclaration of struct str3 *\/$/;"	s	file:
stringVal	subc.tab.c	/^        char		*stringVal;$/;"	m	union:YYSTYPE	file:
stringVal	subc.tab.h	/^        char		*stringVal;$/;"	m	union:YYSTYPE
structAccess	symbol.c	/^struct decl* structAccess(struct decl *typePtr, struct id *fieldId){$/;"	f
struct_specifier	subc.y	/^struct_specifier: STRUCT ID '{' $/;"	l
symbolTableHead	symbol.c	/^static struct ste *symbolTableHead;$/;"	v	typeref:struct:ste	file:
type	subc.h	/^	struct decl	*type;$/;"	m	struct:decl	typeref:struct:decl::decl
typeClass	subc.h	/^	int		typeClass;$/;"	m	struct:decl
typeListHead	symbol.c	/^static struct node *typeListHead;$/;"	v	typeref:struct:node	file:
type_specifier	subc.y	/^type_specifier:	TYPE	$/;"	l
unary	subc.y	/^unary:		'(' expr ')'	$/;"	l
unput	lex.yy.c	194;"	d	file:
value	subc.h	/^	int		value;$/;"	m	struct:decl
yy_accept	lex.yy.c	/^static yyconst flex_int16_t yy_accept[118] =$/;"	v	file:
yy_at_bol	lex.yy.c	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_base	lex.yy.c	/^static yyconst flex_uint16_t yy_base[122] =$/;"	v	file:
yy_bs_column	lex.yy.c	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_lineno	lex.yy.c	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_pos	lex.yy.c	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	lex.yy.c	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_stack	lex.yy.c	/^static YY_BUFFER_STATE * yy_buffer_stack = 0; \/**< Stack as an array. *\/$/;"	v	file:
yy_buffer_stack_max	lex.yy.c	/^static size_t yy_buffer_stack_max = 0; \/**< capacity of stack. *\/$/;"	v	file:
yy_buffer_stack_top	lex.yy.c	/^static size_t yy_buffer_stack_top = 0; \/**< index of top of stack. *\/$/;"	v	file:
yy_buffer_state	lex.yy.c	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_status	lex.yy.c	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_c_buf_p	lex.yy.c	/^static char *yy_c_buf_p = (char *) 0;$/;"	v	file:
yy_ch_buf	lex.yy.c	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_chk	lex.yy.c	/^static yyconst flex_int16_t yy_chk[195] =$/;"	v	file:
yy_create_buffer	lex.yy.c	/^    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )$/;"	f
yy_def	lex.yy.c	/^static yyconst flex_int16_t yy_def[122] =$/;"	v	file:
yy_delete_buffer	lex.yy.c	/^    void yy_delete_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_did_buffer_switch_on_eof	lex.yy.c	/^static int yy_did_buffer_switch_on_eof;$/;"	v	file:
yy_ec	lex.yy.c	/^static yyconst YY_CHAR yy_ec[256] =$/;"	v	file:
yy_fatal_error	lex.yy.c	/^static void yy_fatal_error (yyconst char* msg )$/;"	f	file:
yy_fill_buffer	lex.yy.c	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_flex_debug	lex.yy.c	/^int yy_flex_debug = 0;$/;"	v
yy_flex_strlen	lex.yy.c	/^static int yy_flex_strlen (yyconst char * s )$/;"	f	file:
yy_flex_strncpy	lex.yy.c	/^static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )$/;"	f	file:
yy_flush_buffer	lex.yy.c	/^    void yy_flush_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_get_next_buffer	lex.yy.c	/^static int yy_get_next_buffer (void)$/;"	f	file:
yy_get_previous_state	lex.yy.c	/^    static yy_state_type yy_get_previous_state (void)$/;"	f	file:
yy_hold_char	lex.yy.c	/^static char yy_hold_char;$/;"	v	file:
yy_init	lex.yy.c	/^static int yy_init = 0;		\/* whether we need to initialize *\/$/;"	v	file:
yy_init_buffer	lex.yy.c	/^    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )$/;"	f	file:
yy_init_globals	lex.yy.c	/^static int yy_init_globals (void)$/;"	f	file:
yy_input_file	lex.yy.c	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	lex.yy.c	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	lex.yy.c	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_last_accepting_cpos	lex.yy.c	/^static char *yy_last_accepting_cpos;$/;"	v	file:
yy_last_accepting_state	lex.yy.c	/^static yy_state_type yy_last_accepting_state;$/;"	v	file:
yy_load_buffer_state	lex.yy.c	/^static void yy_load_buffer_state  (void)$/;"	f	file:
yy_meta	lex.yy.c	/^static yyconst YY_CHAR yy_meta[52] =$/;"	v	file:
yy_n_chars	lex.yy.c	/^	int yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_n_chars	lex.yy.c	/^static int yy_n_chars;		\/* number of characters read into yy_ch_buf *\/$/;"	v	file:
yy_new_buffer	lex.yy.c	318;"	d	file:
yy_nxt	lex.yy.c	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	file:
yy_nxt	lex.yy.c	/^static yyconst flex_uint16_t yy_nxt[195] =$/;"	v	file:
yy_reduce_print	subc.tab.c	/^yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule)$/;"	f	file:
yy_scan_buffer	lex.yy.c	/^YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )$/;"	f
yy_scan_bytes	lex.yy.c	/^YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )$/;"	f
yy_scan_string	lex.yy.c	/^YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )$/;"	f
yy_set_bol	lex.yy.c	330;"	d	file:
yy_set_interactive	lex.yy.c	320;"	d	file:
yy_size_t	lex.yy.c	/^typedef size_t yy_size_t;$/;"	t	file:
yy_stack_print	subc.tab.c	/^yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)$/;"	f	file:
yy_start	lex.yy.c	/^static int yy_start = 0;	\/* start state number *\/$/;"	v	file:
yy_state_type	lex.yy.c	/^typedef int yy_state_type;$/;"	t	file:
yy_switch_to_buffer	lex.yy.c	/^    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )$/;"	f
yy_symbol_print	subc.tab.c	/^yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_symbol_value_print	subc.tab.c	/^yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_trans_info	lex.yy.c	/^struct yy_trans_info$/;"	s	file:
yy_try_NUL_trans	lex.yy.c	/^    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )$/;"	f	file:
yy_verify	lex.yy.c	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	file:
yyalloc	lex.yy.c	/^void *yyalloc (yy_size_t  size )$/;"	f
yyalloc	subc.tab.c	/^union yyalloc$/;"	u	file:
yychar	subc.tab.c	/^int yychar;$/;"	v
yycheck	subc.tab.c	/^static const yytype_int16 yycheck[] =$/;"	v	file:
yyclearin	subc.tab.c	705;"	d	file:
yyconst	lex.yy.c	106;"	d	file:
yyconst	lex.yy.c	108;"	d	file:
yydebug	subc.tab.c	/^int yydebug;$/;"	v
yydefact	subc.tab.c	/^static const yytype_uint8 yydefact[] =$/;"	v	file:
yydefgoto	subc.tab.c	/^static const yytype_int16 yydefgoto[] =$/;"	v	file:
yydestruct	subc.tab.c	/^yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yyensure_buffer_stack	lex.yy.c	/^static void yyensure_buffer_stack (void)$/;"	f	file:
yyerrok	subc.tab.c	704;"	d	file:
yyerror	subc.tab.c	/^int    yyerror (char* s)$/;"	f
yyfree	lex.yy.c	/^void yyfree (void * ptr )$/;"	f
yyget_debug	lex.yy.c	/^int yyget_debug  (void)$/;"	f
yyget_in	lex.yy.c	/^FILE *yyget_in  (void)$/;"	f
yyget_leng	lex.yy.c	/^yy_size_t yyget_leng  (void)$/;"	f
yyget_lineno	lex.yy.c	/^int yyget_lineno  (void)$/;"	f
yyget_out	lex.yy.c	/^FILE *yyget_out  (void)$/;"	f
yyget_text	lex.yy.c	/^char *yyget_text  (void)$/;"	f
yyin	lex.yy.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yyinput	lex.yy.c	/^    static int yyinput (void)$/;"	f	file:
yyleng	lex.yy.c	/^yy_size_t yyleng;$/;"	v
yyless	lex.yy.c	181;"	d	file:
yyless	lex.yy.c	2028;"	d	file:
yyless	lex.yy.c	2029;"	d	file:
yylex_destroy	lex.yy.c	/^int yylex_destroy  (void)$/;"	f
yylineno	lex.yy.c	/^int yylineno = 1;$/;"	v
yylval	subc.tab.c	/^YYSTYPE yylval;$/;"	v
yymore	lex.yy.c	544;"	d	file:
yynerrs	subc.tab.c	/^int yynerrs;$/;"	v
yyout	lex.yy.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yypact	subc.tab.c	/^static const yytype_int16 yypact[] =$/;"	v	file:
yypact_value_is_default	subc.tab.c	516;"	d	file:
yyparse	subc.tab.c	/^yyparse (void)$/;"	f
yypgoto	subc.tab.c	/^static const yytype_int16 yypgoto[] =$/;"	v	file:
yypop_buffer_state	lex.yy.c	/^void yypop_buffer_state (void)$/;"	f
yypush_buffer_state	lex.yy.c	/^void yypush_buffer_state (YY_BUFFER_STATE new_buffer )$/;"	f
yyr1	subc.tab.c	/^static const yytype_uint8 yyr1[] =$/;"	v	file:
yyr2	subc.tab.c	/^static const yytype_uint8 yyr2[] =$/;"	v	file:
yyrealloc	lex.yy.c	/^void *yyrealloc  (void * ptr, yy_size_t  size )$/;"	f
yyrestart	lex.yy.c	/^    void yyrestart  (FILE * input_file )$/;"	f
yyrline	subc.tab.c	/^static const yytype_uint16 yyrline[] =$/;"	v	file:
yyset_debug	lex.yy.c	/^void yyset_debug (int  _bdebug )$/;"	f
yyset_in	lex.yy.c	/^void yyset_in (FILE *  _in_str )$/;"	f
yyset_lineno	lex.yy.c	/^void yyset_lineno (int  _line_number )$/;"	f
yyset_out	lex.yy.c	/^void yyset_out (FILE *  _out_str )$/;"	f
yyss_alloc	subc.tab.c	/^  yytype_int16 yyss_alloc;$/;"	m	union:yyalloc	file:
yystos	subc.tab.c	/^static const yytype_uint8 yystos[] =$/;"	v	file:
yystpcpy	subc.tab.c	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystpcpy	subc.tab.c	906;"	d	file:
yystrlen	subc.tab.c	/^yystrlen (const char *yystr)$/;"	f	file:
yystrlen	subc.tab.c	890;"	d	file:
yysyntax_error	subc.tab.c	/^yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,$/;"	f	file:
yytable	subc.tab.c	/^static const yytype_uint8 yytable[] =$/;"	v	file:
yytable_value_is_error	subc.tab.c	521;"	d	file:
yyterminate	lex.yy.c	705;"	d	file:
yytext	lex.yy.c	/^char *yytext;$/;"	v
yytext_ptr	lex.yy.c	356;"	d	file:
yytext_ptr	lex.yy.c	358;"	d	file:
yytname	subc.tab.c	/^static const char *const yytname[] =$/;"	v	file:
yytnamerr	subc.tab.c	/^yytnamerr (char *yyres, const char *yystr)$/;"	f	file:
yytokentype	subc.tab.c	/^  enum yytokentype$/;"	g	file:
yytokentype	subc.tab.h	/^  enum yytokentype$/;"	g
yytoknum	subc.tab.c	/^static const yytype_uint16 yytoknum[] =$/;"	v	file:
yytranslate	subc.tab.c	/^static const yytype_uint8 yytranslate[] =$/;"	v	file:
yytype_int16	subc.tab.c	/^typedef YYTYPE_INT16 yytype_int16;$/;"	t	file:
yytype_int16	subc.tab.c	/^typedef short int yytype_int16;$/;"	t	file:
yytype_int8	subc.tab.c	/^typedef YYTYPE_INT8 yytype_int8;$/;"	t	file:
yytype_int8	subc.tab.c	/^typedef signed char yytype_int8;$/;"	t	file:
yytype_uint16	subc.tab.c	/^typedef YYTYPE_UINT16 yytype_uint16;$/;"	t	file:
yytype_uint16	subc.tab.c	/^typedef unsigned short int yytype_uint16;$/;"	t	file:
yytype_uint8	subc.tab.c	/^typedef YYTYPE_UINT8 yytype_uint8;$/;"	t	file:
yytype_uint8	subc.tab.c	/^typedef unsigned char yytype_uint8;$/;"	t	file:
yyunput	lex.yy.c	/^    static void yyunput (int c, char * yy_bp )$/;"	f	file:
yyvs_alloc	subc.tab.c	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	file:

Terminals unused in grammar

   EQUOP
   RELOP


State 138 conflicts: 11 shift/reduce
State 139 conflicts: 11 shift/reduce
State 140 conflicts: 11 shift/reduce
State 141 conflicts: 11 shift/reduce
State 142 conflicts: 11 shift/reduce
State 143 conflicts: 11 shift/reduce
State 144 conflicts: 6 shift/reduce
State 145 conflicts: 6 shift/reduce
State 146 conflicts: 6 shift/reduce
State 147 conflicts: 6 shift/reduce
State 148 conflicts: 6 shift/reduce


Grammar

    0 $accept: program $end

    1 program: ext_def_list

    2 ext_def_list: ext_def_list ext_def
    3             | %empty

    4 ext_def: type_specifier pointers ID ';'
    5        | type_specifier pointers ID '[' const_expr ']' ';'
    6        | func_decl ';'
    7        | type_specifier ';'

    8 $@1: %empty

    9 $@2: %empty

   10 ext_def: func_decl '{' $@1 local_defs $@2 stmt_list '}'

   11 type_specifier: TYPE
   12               | VOID
   13               | struct_specifier

   14 $@3: %empty

   15 struct_specifier: STRUCT ID '{' $@3 def_list '}'
   16                 | STRUCT ID

   17 func_decl: type_specifier pointers ID '(' ')'
   18          | type_specifier pointers ID '(' VOID ')'
   19          | type_specifier pointers ID '(' param_list ')'

   20 pointers: '*'
   21         | %empty

   22 param_list: param_decl
   23           | param_list ',' param_decl

   24 param_decl: type_specifier pointers ID
   25           | type_specifier pointers ID '[' const_expr ']'

   26 def_list: def_list def
   27         | %empty

   28 def: type_specifier pointers ID ';'
   29    | type_specifier pointers ID '[' const_expr ']' ';'
   30    | type_specifier ';'
   31    | func_decl ';'

   32 $@4: %empty

   33 compound_stmt: '{' $@4 local_defs stmt_list '}'

   34 local_defs: def_list

   35 stmt_list: stmt_list stmt
   36          | %empty

   37 stmt: expr ';'
   38     | compound_stmt
   39     | RETURN ';'

   40 $@5: %empty

   41 stmt: RETURN $@5 expr ';'
   42     | ';'
   43     | IF if_label '(' expr branch_false ')' stmt

   44 @6: %empty

   45 stmt: IF if_label '(' expr branch_false ')' stmt ELSE @6 stmt
   46     | WHILE '(' expr ')' stmt
   47     | FOR '(' expr_e ';' expr_e ';' expr_e ')' stmt
   48     | BREAK ';'
   49     | CONTINUE ';'
   50     | 'w' '(' STRING ')'
   51     | 'w' '(' expr ')'

   52 if_label: %empty

   53 branch_false: %empty

   54 expr_e: expr
   55       | %empty

   56 const_expr: INTEGER_CONST

   57 $@7: %empty

   58 expr: unary '=' $@7 expr
   59     | or_expr

   60 or_expr: or_list

   61 or_list: or_list LOGICAL_OR and_expr
   62        | and_expr

   63 and_expr: and_list

   64 and_list: and_list LOGICAL_AND binary
   65         | binary

   66 binary: binary RELOP_LESS binary
   67       | binary RELOP_LESS_EQUAL binary
   68       | binary RELOP_GREATER binary
   69       | binary RELOP_GREATER_EQUAL binary
   70       | binary EQUOP_EQUAL binary
   71       | binary EQUOP_NOT_EQUAL binary
   72       | binary '*' binary
   73       | binary '/' binary
   74       | binary '%' binary
   75       | binary '+' binary
   76       | binary '-' binary
   77       | unary

   78 unary: '(' expr ')'
   79      | '(' unary ')'
   80      | INTEGER_CONST
   81      | CHAR_CONST
   82      | ID
   83      | STRING
   84      | '-' unary
   85      | '!' unary
   86      | unary INCOP
   87      | unary DECOP
   88      | INCOP unary
   89      | DECOP unary
   90      | '&' unary
   91      | '*' unary
   92      | unary '[' expr ']'
   93      | unary '.' ID
   94      | unary STRUCTOP ID
   95      | unary '(' func_label args ')'
   96      | unary '(' func_label ')'

   97 func_label: %empty

   98 args: expr
   99     | args ',' expr


Terminals, with rules where they appear

$end (0) 0
'!' (33) 85
'%' (37) 74
'&' (38) 90
'(' (40) 17 18 19 43 45 46 47 50 51 78 79 95 96
')' (41) 17 18 19 43 45 46 47 50 51 78 79 95 96
'*' (42) 20 72 91
'+' (43) 75
',' (44) 23 99
'-' (45) 76 84
'.' (46) 93
'/' (47) 73
';' (59) 4 5 6 7 28 29 30 31 37 39 41 42 47 48 49
'=' (61) 58
'[' (91) 5 25 29 92
']' (93) 5 25 29 92
'w' (119) 50 51
'{' (123) 10 15 33
'}' (125) 10 15 33
error (256)
TYPE (258) 11
VOID (259) 12 18
STRUCT (260) 15 16
RETURN (261) 39 41
IF (262) 43 45
ELSE (263) 45
WHILE (264) 46
FOR (265) 47
BREAK (266) 48
CONTINUE (267) 49
LOGICAL_OR (268) 61
LOGICAL_AND (269) 64
RELOP_LESS (270) 66
RELOP_LESS_EQUAL (271) 67
RELOP_GREATER (272) 68
RELOP_GREATER_EQUAL (273) 69
EQUOP_EQUAL (274) 70
EQUOP_NOT_EQUAL (275) 71
INCOP (276) 86 88
DECOP (277) 87 89
STRUCTOP (278) 94
ID (279) 4 5 15 16 17 18 19 24 25 28 29 82 93 94
INTEGER_CONST (280) 56 80
STRING (281) 50 83
CHAR_CONST (282) 81
IFSIMPLE (283)
EQUOP (284)
RELOP (285)


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
program (50)
    on left: 1, on right: 0
ext_def_list (51)
    on left: 2 3, on right: 1 2
ext_def (52)
    on left: 4 5 6 7 10, on right: 2
$@1 (53)
    on left: 8, on right: 10
$@2 (54)
    on left: 9, on right: 10
type_specifier (55)
    on left: 11 12 13, on right: 4 5 7 17 18 19 24 25 28 29 30
struct_specifier (56)
    on left: 15 16, on right: 13
$@3 (57)
    on left: 14, on right: 15
func_decl (58)
    on left: 17 18 19, on right: 6 10 31
pointers (59)
    on left: 20 21, on right: 4 5 17 18 19 24 25 28 29
param_list (60)
    on left: 22 23, on right: 19 23
param_decl (61)
    on left: 24 25, on right: 22 23
def_list (62)
    on left: 26 27, on right: 15 26 34
def (63)
    on left: 28 29 30 31, on right: 26
compound_stmt (64)
    on left: 33, on right: 38
$@4 (65)
    on left: 32, on right: 33
local_defs (66)
    on left: 34, on right: 10 33
stmt_list (67)
    on left: 35 36, on right: 10 33 35
stmt (68)
    on left: 37 38 39 41 42 43 45 46 47 48 49 50 51, on right: 35 43
    45 46 47
$@5 (69)
    on left: 40, on right: 41
@6 (70)
    on left: 44, on right: 45
if_label (71)
    on left: 52, on right: 43 45
branch_false (72)
    on left: 53, on right: 43 45
expr_e (73)
    on left: 54 55, on right: 47
const_expr (74)
    on left: 56, on right: 5 25 29
expr (75)
    on left: 58 59, on right: 37 41 43 45 46 51 54 58 78 92 98 99
$@7 (76)
    on left: 57, on right: 58
or_expr (77)
    on left: 60, on right: 59
or_list (78)
    on left: 61 62, on right: 60 61
and_expr (79)
    on left: 63, on right: 61 62
and_list (80)
    on left: 64 65, on right: 63 64
binary (81)
    on left: 66 67 68 69 70 71 72 73 74 75 76 77, on right: 64 65 66
    67 68 69 70 71 72 73 74 75 76
unary (82)
    on left: 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95
    96, on right: 58 77 79 84 85 86 87 88 89 90 91 92 93 94 95 96
func_label (83)
    on left: 97, on right: 95 96
args (84)
    on left: 98 99, on right: 95 99


State 0

    0 $accept: . program $end

    $default  reduce using rule 3 (ext_def_list)

    program       go to state 1
    ext_def_list  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: ext_def_list .
    2 ext_def_list: ext_def_list . ext_def

    TYPE    shift, and go to state 4
    VOID    shift, and go to state 5
    STRUCT  shift, and go to state 6

    $default  reduce using rule 1 (program)

    ext_def           go to state 7
    type_specifier    go to state 8
    struct_specifier  go to state 9
    func_decl         go to state 10


State 3

    0 $accept: program $end .

    $default  accept


State 4

   11 type_specifier: TYPE .

    $default  reduce using rule 11 (type_specifier)


State 5

   12 type_specifier: VOID .

    $default  reduce using rule 12 (type_specifier)


State 6

   15 struct_specifier: STRUCT . ID '{' $@3 def_list '}'
   16                 | STRUCT . ID

    ID  shift, and go to state 11


State 7

    2 ext_def_list: ext_def_list ext_def .

    $default  reduce using rule 2 (ext_def_list)


State 8

    4 ext_def: type_specifier . pointers ID ';'
    5        | type_specifier . pointers ID '[' const_expr ']' ';'
    7        | type_specifier . ';'
   17 func_decl: type_specifier . pointers ID '(' ')'
   18          | type_specifier . pointers ID '(' VOID ')'
   19          | type_specifier . pointers ID '(' param_list ')'

    '*'  shift, and go to state 12
    ';'  shift, and go to state 13

    $default  reduce using rule 21 (pointers)

    pointers  go to state 14


State 9

   13 type_specifier: struct_specifier .

    $default  reduce using rule 13 (type_specifier)


State 10

    6 ext_def: func_decl . ';'
   10        | func_decl . '{' $@1 local_defs $@2 stmt_list '}'

    ';'  shift, and go to state 15
    '{'  shift, and go to state 16


State 11

   15 struct_specifier: STRUCT ID . '{' $@3 def_list '}'
   16                 | STRUCT ID .

    '{'  shift, and go to state 17

    $default  reduce using rule 16 (struct_specifier)


State 12

   20 pointers: '*' .

    $default  reduce using rule 20 (pointers)


State 13

    7 ext_def: type_specifier ';' .

    $default  reduce using rule 7 (ext_def)


State 14

    4 ext_def: type_specifier pointers . ID ';'
    5        | type_specifier pointers . ID '[' const_expr ']' ';'
   17 func_decl: type_specifier pointers . ID '(' ')'
   18          | type_specifier pointers . ID '(' VOID ')'
   19          | type_specifier pointers . ID '(' param_list ')'

    ID  shift, and go to state 18


State 15

    6 ext_def: func_decl ';' .

    $default  reduce using rule 6 (ext_def)


State 16

   10 ext_def: func_decl '{' . $@1 local_defs $@2 stmt_list '}'

    $default  reduce using rule 8 ($@1)

    $@1  go to state 19


State 17

   15 struct_specifier: STRUCT ID '{' . $@3 def_list '}'

    $default  reduce using rule 14 ($@3)

    $@3  go to state 20


State 18

    4 ext_def: type_specifier pointers ID . ';'
    5        | type_specifier pointers ID . '[' const_expr ']' ';'
   17 func_decl: type_specifier pointers ID . '(' ')'
   18          | type_specifier pointers ID . '(' VOID ')'
   19          | type_specifier pointers ID . '(' param_list ')'

    '['  shift, and go to state 21
    '('  shift, and go to state 22
    ';'  shift, and go to state 23


State 19

   10 ext_def: func_decl '{' $@1 . local_defs $@2 stmt_list '}'

    $default  reduce using rule 27 (def_list)

    def_list    go to state 24
    local_defs  go to state 25


State 20

   15 struct_specifier: STRUCT ID '{' $@3 . def_list '}'

    $default  reduce using rule 27 (def_list)

    def_list  go to state 26


State 21

    5 ext_def: type_specifier pointers ID '[' . const_expr ']' ';'

    INTEGER_CONST  shift, and go to state 27

    const_expr  go to state 28


State 22

   17 func_decl: type_specifier pointers ID '(' . ')'
   18          | type_specifier pointers ID '(' . VOID ')'
   19          | type_specifier pointers ID '(' . param_list ')'

    TYPE    shift, and go to state 4
    VOID    shift, and go to state 29
    STRUCT  shift, and go to state 6
    ')'     shift, and go to state 30

    type_specifier    go to state 31
    struct_specifier  go to state 9
    param_list        go to state 32
    param_decl        go to state 33


State 23

    4 ext_def: type_specifier pointers ID ';' .

    $default  reduce using rule 4 (ext_def)


State 24

   26 def_list: def_list . def
   34 local_defs: def_list .

    TYPE    shift, and go to state 4
    VOID    shift, and go to state 5
    STRUCT  shift, and go to state 6

    $default  reduce using rule 34 (local_defs)

    type_specifier    go to state 34
    struct_specifier  go to state 9
    func_decl         go to state 35
    def               go to state 36


State 25

   10 ext_def: func_decl '{' $@1 local_defs . $@2 stmt_list '}'

    $default  reduce using rule 9 ($@2)

    $@2  go to state 37


State 26

   15 struct_specifier: STRUCT ID '{' $@3 def_list . '}'
   26 def_list: def_list . def

    TYPE    shift, and go to state 4
    VOID    shift, and go to state 5
    STRUCT  shift, and go to state 6
    '}'     shift, and go to state 38

    type_specifier    go to state 34
    struct_specifier  go to state 9
    func_decl         go to state 35
    def               go to state 36


State 27

   56 const_expr: INTEGER_CONST .

    $default  reduce using rule 56 (const_expr)


State 28

    5 ext_def: type_specifier pointers ID '[' const_expr . ']' ';'

    ']'  shift, and go to state 39


State 29

   12 type_specifier: VOID .
   18 func_decl: type_specifier pointers ID '(' VOID . ')'

    ')'  shift, and go to state 40

    $default  reduce using rule 12 (type_specifier)


State 30

   17 func_decl: type_specifier pointers ID '(' ')' .

    $default  reduce using rule 17 (func_decl)


State 31

   24 param_decl: type_specifier . pointers ID
   25           | type_specifier . pointers ID '[' const_expr ']'

    '*'  shift, and go to state 12

    $default  reduce using rule 21 (pointers)

    pointers  go to state 41


State 32

   19 func_decl: type_specifier pointers ID '(' param_list . ')'
   23 param_list: param_list . ',' param_decl

    ','  shift, and go to state 42
    ')'  shift, and go to state 43


State 33

   22 param_list: param_decl .

    $default  reduce using rule 22 (param_list)


State 34

   17 func_decl: type_specifier . pointers ID '(' ')'
   18          | type_specifier . pointers ID '(' VOID ')'
   19          | type_specifier . pointers ID '(' param_list ')'
   28 def: type_specifier . pointers ID ';'
   29    | type_specifier . pointers ID '[' const_expr ']' ';'
   30    | type_specifier . ';'

    '*'  shift, and go to state 12
    ';'  shift, and go to state 44

    $default  reduce using rule 21 (pointers)

    pointers  go to state 45


State 35

   31 def: func_decl . ';'

    ';'  shift, and go to state 46


State 36

   26 def_list: def_list def .

    $default  reduce using rule 26 (def_list)


State 37

   10 ext_def: func_decl '{' $@1 local_defs $@2 . stmt_list '}'

    $default  reduce using rule 36 (stmt_list)

    stmt_list  go to state 47


State 38

   15 struct_specifier: STRUCT ID '{' $@3 def_list '}' .

    $default  reduce using rule 15 (struct_specifier)


State 39

    5 ext_def: type_specifier pointers ID '[' const_expr ']' . ';'

    ';'  shift, and go to state 48


State 40

   18 func_decl: type_specifier pointers ID '(' VOID ')' .

    $default  reduce using rule 18 (func_decl)


State 41

   24 param_decl: type_specifier pointers . ID
   25           | type_specifier pointers . ID '[' const_expr ']'

    ID  shift, and go to state 49


State 42

   23 param_list: param_list ',' . param_decl

    TYPE    shift, and go to state 4
    VOID    shift, and go to state 5
    STRUCT  shift, and go to state 6

    type_specifier    go to state 31
    struct_specifier  go to state 9
    param_decl        go to state 50


State 43

   19 func_decl: type_specifier pointers ID '(' param_list ')' .

    $default  reduce using rule 19 (func_decl)


State 44

   30 def: type_specifier ';' .

    $default  reduce using rule 30 (def)


State 45

   17 func_decl: type_specifier pointers . ID '(' ')'
   18          | type_specifier pointers . ID '(' VOID ')'
   19          | type_specifier pointers . ID '(' param_list ')'
   28 def: type_specifier pointers . ID ';'
   29    | type_specifier pointers . ID '[' const_expr ']' ';'

    ID  shift, and go to state 51


State 46

   31 def: func_decl ';' .

    $default  reduce using rule 31 (def)


State 47

   10 ext_def: func_decl '{' $@1 local_defs $@2 stmt_list . '}'
   35 stmt_list: stmt_list . stmt

    RETURN         shift, and go to state 52
    IF             shift, and go to state 53
    WHILE          shift, and go to state 54
    FOR            shift, and go to state 55
    BREAK          shift, and go to state 56
    CONTINUE       shift, and go to state 57
    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68
    ';'            shift, and go to state 69
    '{'            shift, and go to state 70
    '}'            shift, and go to state 71
    'w'            shift, and go to state 72

    compound_stmt  go to state 73
    stmt           go to state 74
    expr           go to state 75
    or_expr        go to state 76
    or_list        go to state 77
    and_expr       go to state 78
    and_list       go to state 79
    binary         go to state 80
    unary          go to state 81


State 48

    5 ext_def: type_specifier pointers ID '[' const_expr ']' ';' .

    $default  reduce using rule 5 (ext_def)


State 49

   24 param_decl: type_specifier pointers ID .
   25           | type_specifier pointers ID . '[' const_expr ']'

    '['  shift, and go to state 82

    $default  reduce using rule 24 (param_decl)


State 50

   23 param_list: param_list ',' param_decl .

    $default  reduce using rule 23 (param_list)


State 51

   17 func_decl: type_specifier pointers ID . '(' ')'
   18          | type_specifier pointers ID . '(' VOID ')'
   19          | type_specifier pointers ID . '(' param_list ')'
   28 def: type_specifier pointers ID . ';'
   29    | type_specifier pointers ID . '[' const_expr ']' ';'

    '['  shift, and go to state 83
    '('  shift, and go to state 22
    ';'  shift, and go to state 84


State 52

   39 stmt: RETURN . ';'
   41     | RETURN . $@5 expr ';'

    ';'  shift, and go to state 85

    $default  reduce using rule 40 ($@5)

    $@5  go to state 86


State 53

   43 stmt: IF . if_label '(' expr branch_false ')' stmt
   45     | IF . if_label '(' expr branch_false ')' stmt ELSE @6 stmt

    $default  reduce using rule 52 (if_label)

    if_label  go to state 87


State 54

   46 stmt: WHILE . '(' expr ')' stmt

    '('  shift, and go to state 88


State 55

   47 stmt: FOR . '(' expr_e ';' expr_e ';' expr_e ')' stmt

    '('  shift, and go to state 89


State 56

   48 stmt: BREAK . ';'

    ';'  shift, and go to state 90


State 57

   49 stmt: CONTINUE . ';'

    ';'  shift, and go to state 91


State 58

   88 unary: INCOP . unary

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    unary  go to state 92


State 59

   89 unary: DECOP . unary

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    unary  go to state 93


State 60

   82 unary: ID .

    $default  reduce using rule 82 (unary)


State 61

   80 unary: INTEGER_CONST .

    $default  reduce using rule 80 (unary)


State 62

   83 unary: STRING .

    $default  reduce using rule 83 (unary)


State 63

   81 unary: CHAR_CONST .

    $default  reduce using rule 81 (unary)


State 64

   90 unary: '&' . unary

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    unary  go to state 94


State 65

   84 unary: '-' . unary

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    unary  go to state 95


State 66

   91 unary: '*' . unary

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    unary  go to state 96


State 67

   85 unary: '!' . unary

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    unary  go to state 97


State 68

   78 unary: '(' . expr ')'
   79      | '(' . unary ')'

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    expr      go to state 98
    or_expr   go to state 76
    or_list   go to state 77
    and_expr  go to state 78
    and_list  go to state 79
    binary    go to state 80
    unary     go to state 99


State 69

   42 stmt: ';' .

    $default  reduce using rule 42 (stmt)


State 70

   33 compound_stmt: '{' . $@4 local_defs stmt_list '}'

    $default  reduce using rule 32 ($@4)

    $@4  go to state 100


State 71

   10 ext_def: func_decl '{' $@1 local_defs $@2 stmt_list '}' .

    $default  reduce using rule 10 (ext_def)


State 72

   50 stmt: 'w' . '(' STRING ')'
   51     | 'w' . '(' expr ')'

    '('  shift, and go to state 101


State 73

   38 stmt: compound_stmt .

    $default  reduce using rule 38 (stmt)


State 74

   35 stmt_list: stmt_list stmt .

    $default  reduce using rule 35 (stmt_list)


State 75

   37 stmt: expr . ';'

    ';'  shift, and go to state 102


State 76

   59 expr: or_expr .

    $default  reduce using rule 59 (expr)


State 77

   60 or_expr: or_list .
   61 or_list: or_list . LOGICAL_OR and_expr

    LOGICAL_OR  shift, and go to state 103

    $default  reduce using rule 60 (or_expr)


State 78

   62 or_list: and_expr .

    $default  reduce using rule 62 (or_list)


State 79

   63 and_expr: and_list .
   64 and_list: and_list . LOGICAL_AND binary

    LOGICAL_AND  shift, and go to state 104

    $default  reduce using rule 63 (and_expr)


State 80

   65 and_list: binary .
   66 binary: binary . RELOP_LESS binary
   67       | binary . RELOP_LESS_EQUAL binary
   68       | binary . RELOP_GREATER binary
   69       | binary . RELOP_GREATER_EQUAL binary
   70       | binary . EQUOP_EQUAL binary
   71       | binary . EQUOP_NOT_EQUAL binary
   72       | binary . '*' binary
   73       | binary . '/' binary
   74       | binary . '%' binary
   75       | binary . '+' binary
   76       | binary . '-' binary

    RELOP_LESS           shift, and go to state 105
    RELOP_LESS_EQUAL     shift, and go to state 106
    RELOP_GREATER        shift, and go to state 107
    RELOP_GREATER_EQUAL  shift, and go to state 108
    EQUOP_EQUAL          shift, and go to state 109
    EQUOP_NOT_EQUAL      shift, and go to state 110
    '+'                  shift, and go to state 111
    '-'                  shift, and go to state 112
    '*'                  shift, and go to state 113
    '/'                  shift, and go to state 114
    '%'                  shift, and go to state 115

    $default  reduce using rule 65 (and_list)


State 81

   58 expr: unary . '=' $@7 expr
   77 binary: unary .
   86 unary: unary . INCOP
   87      | unary . DECOP
   92      | unary . '[' expr ']'
   93      | unary . '.' ID
   94      | unary . STRUCTOP ID
   95      | unary . '(' func_label args ')'
   96      | unary . '(' func_label ')'

    INCOP     shift, and go to state 116
    DECOP     shift, and go to state 117
    STRUCTOP  shift, and go to state 118
    '='       shift, and go to state 119
    '['       shift, and go to state 120
    '('       shift, and go to state 121
    '.'       shift, and go to state 122

    $default  reduce using rule 77 (binary)


State 82

   25 param_decl: type_specifier pointers ID '[' . const_expr ']'

    INTEGER_CONST  shift, and go to state 27

    const_expr  go to state 123


State 83

   29 def: type_specifier pointers ID '[' . const_expr ']' ';'

    INTEGER_CONST  shift, and go to state 27

    const_expr  go to state 124


State 84

   28 def: type_specifier pointers ID ';' .

    $default  reduce using rule 28 (def)


State 85

   39 stmt: RETURN ';' .

    $default  reduce using rule 39 (stmt)


State 86

   41 stmt: RETURN $@5 . expr ';'

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    expr      go to state 125
    or_expr   go to state 76
    or_list   go to state 77
    and_expr  go to state 78
    and_list  go to state 79
    binary    go to state 80
    unary     go to state 81


State 87

   43 stmt: IF if_label . '(' expr branch_false ')' stmt
   45     | IF if_label . '(' expr branch_false ')' stmt ELSE @6 stmt

    '('  shift, and go to state 126


State 88

   46 stmt: WHILE '(' . expr ')' stmt

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    expr      go to state 127
    or_expr   go to state 76
    or_list   go to state 77
    and_expr  go to state 78
    and_list  go to state 79
    binary    go to state 80
    unary     go to state 81


State 89

   47 stmt: FOR '(' . expr_e ';' expr_e ';' expr_e ')' stmt

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    $default  reduce using rule 55 (expr_e)

    expr_e    go to state 128
    expr      go to state 129
    or_expr   go to state 76
    or_list   go to state 77
    and_expr  go to state 78
    and_list  go to state 79
    binary    go to state 80
    unary     go to state 81


State 90

   48 stmt: BREAK ';' .

    $default  reduce using rule 48 (stmt)


State 91

   49 stmt: CONTINUE ';' .

    $default  reduce using rule 49 (stmt)


State 92

   86 unary: unary . INCOP
   87      | unary . DECOP
   88      | INCOP unary .
   92      | unary . '[' expr ']'
   93      | unary . '.' ID
   94      | unary . STRUCTOP ID
   95      | unary . '(' func_label args ')'
   96      | unary . '(' func_label ')'

    INCOP     shift, and go to state 116
    DECOP     shift, and go to state 117
    STRUCTOP  shift, and go to state 118
    '['       shift, and go to state 120
    '('       shift, and go to state 121
    '.'       shift, and go to state 122

    $default  reduce using rule 88 (unary)


State 93

   86 unary: unary . INCOP
   87      | unary . DECOP
   89      | DECOP unary .
   92      | unary . '[' expr ']'
   93      | unary . '.' ID
   94      | unary . STRUCTOP ID
   95      | unary . '(' func_label args ')'
   96      | unary . '(' func_label ')'

    INCOP     shift, and go to state 116
    DECOP     shift, and go to state 117
    STRUCTOP  shift, and go to state 118
    '['       shift, and go to state 120
    '('       shift, and go to state 121
    '.'       shift, and go to state 122

    $default  reduce using rule 89 (unary)


State 94

   86 unary: unary . INCOP
   87      | unary . DECOP
   90      | '&' unary .
   92      | unary . '[' expr ']'
   93      | unary . '.' ID
   94      | unary . STRUCTOP ID
   95      | unary . '(' func_label args ')'
   96      | unary . '(' func_label ')'

    INCOP     shift, and go to state 116
    DECOP     shift, and go to state 117
    STRUCTOP  shift, and go to state 118
    '['       shift, and go to state 120
    '('       shift, and go to state 121
    '.'       shift, and go to state 122

    $default  reduce using rule 90 (unary)


State 95

   84 unary: '-' unary .
   86      | unary . INCOP
   87      | unary . DECOP
   92      | unary . '[' expr ']'
   93      | unary . '.' ID
   94      | unary . STRUCTOP ID
   95      | unary . '(' func_label args ')'
   96      | unary . '(' func_label ')'

    INCOP     shift, and go to state 116
    DECOP     shift, and go to state 117
    STRUCTOP  shift, and go to state 118
    '['       shift, and go to state 120
    '('       shift, and go to state 121
    '.'       shift, and go to state 122

    $default  reduce using rule 84 (unary)


State 96

   86 unary: unary . INCOP
   87      | unary . DECOP
   91      | '*' unary .
   92      | unary . '[' expr ']'
   93      | unary . '.' ID
   94      | unary . STRUCTOP ID
   95      | unary . '(' func_label args ')'
   96      | unary . '(' func_label ')'

    INCOP     shift, and go to state 116
    DECOP     shift, and go to state 117
    STRUCTOP  shift, and go to state 118
    '['       shift, and go to state 120
    '('       shift, and go to state 121
    '.'       shift, and go to state 122

    $default  reduce using rule 91 (unary)


State 97

   85 unary: '!' unary .
   86      | unary . INCOP
   87      | unary . DECOP
   92      | unary . '[' expr ']'
   93      | unary . '.' ID
   94      | unary . STRUCTOP ID
   95      | unary . '(' func_label args ')'
   96      | unary . '(' func_label ')'

    INCOP     shift, and go to state 116
    DECOP     shift, and go to state 117
    STRUCTOP  shift, and go to state 118
    '['       shift, and go to state 120
    '('       shift, and go to state 121
    '.'       shift, and go to state 122

    $default  reduce using rule 85 (unary)


State 98

   78 unary: '(' expr . ')'

    ')'  shift, and go to state 130


State 99

   58 expr: unary . '=' $@7 expr
   77 binary: unary .
   79 unary: '(' unary . ')'
   86      | unary . INCOP
   87      | unary . DECOP
   92      | unary . '[' expr ']'
   93      | unary . '.' ID
   94      | unary . STRUCTOP ID
   95      | unary . '(' func_label args ')'
   96      | unary . '(' func_label ')'

    INCOP     shift, and go to state 116
    DECOP     shift, and go to state 117
    STRUCTOP  shift, and go to state 118
    '='       shift, and go to state 119
    '['       shift, and go to state 120
    '('       shift, and go to state 121
    ')'       shift, and go to state 131
    '.'       shift, and go to state 122

    $default  reduce using rule 77 (binary)


State 100

   33 compound_stmt: '{' $@4 . local_defs stmt_list '}'

    $default  reduce using rule 27 (def_list)

    def_list    go to state 24
    local_defs  go to state 132


State 101

   50 stmt: 'w' '(' . STRING ')'
   51     | 'w' '(' . expr ')'

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 133
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    expr      go to state 134
    or_expr   go to state 76
    or_list   go to state 77
    and_expr  go to state 78
    and_list  go to state 79
    binary    go to state 80
    unary     go to state 81


State 102

   37 stmt: expr ';' .

    $default  reduce using rule 37 (stmt)


State 103

   61 or_list: or_list LOGICAL_OR . and_expr

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    and_expr  go to state 135
    and_list  go to state 79
    binary    go to state 80
    unary     go to state 136


State 104

   64 and_list: and_list LOGICAL_AND . binary

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    binary  go to state 137
    unary   go to state 136


State 105

   66 binary: binary RELOP_LESS . binary

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    binary  go to state 138
    unary   go to state 136


State 106

   67 binary: binary RELOP_LESS_EQUAL . binary

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    binary  go to state 139
    unary   go to state 136


State 107

   68 binary: binary RELOP_GREATER . binary

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    binary  go to state 140
    unary   go to state 136


State 108

   69 binary: binary RELOP_GREATER_EQUAL . binary

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    binary  go to state 141
    unary   go to state 136


State 109

   70 binary: binary EQUOP_EQUAL . binary

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    binary  go to state 142
    unary   go to state 136


State 110

   71 binary: binary EQUOP_NOT_EQUAL . binary

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    binary  go to state 143
    unary   go to state 136


State 111

   75 binary: binary '+' . binary

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    binary  go to state 144
    unary   go to state 136


State 112

   76 binary: binary '-' . binary

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    binary  go to state 145
    unary   go to state 136


State 113

   72 binary: binary '*' . binary

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    binary  go to state 146
    unary   go to state 136


State 114

   73 binary: binary '/' . binary

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    binary  go to state 147
    unary   go to state 136


State 115

   74 binary: binary '%' . binary

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    binary  go to state 148
    unary   go to state 136


State 116

   86 unary: unary INCOP .

    $default  reduce using rule 86 (unary)


State 117

   87 unary: unary DECOP .

    $default  reduce using rule 87 (unary)


State 118

   94 unary: unary STRUCTOP . ID

    ID  shift, and go to state 149


State 119

   58 expr: unary '=' . $@7 expr

    $default  reduce using rule 57 ($@7)

    $@7  go to state 150


State 120

   92 unary: unary '[' . expr ']'

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    expr      go to state 151
    or_expr   go to state 76
    or_list   go to state 77
    and_expr  go to state 78
    and_list  go to state 79
    binary    go to state 80
    unary     go to state 81


State 121

   95 unary: unary '(' . func_label args ')'
   96      | unary '(' . func_label ')'

    $default  reduce using rule 97 (func_label)

    func_label  go to state 152


State 122

   93 unary: unary '.' . ID

    ID  shift, and go to state 153


State 123

   25 param_decl: type_specifier pointers ID '[' const_expr . ']'

    ']'  shift, and go to state 154


State 124

   29 def: type_specifier pointers ID '[' const_expr . ']' ';'

    ']'  shift, and go to state 155


State 125

   41 stmt: RETURN $@5 expr . ';'

    ';'  shift, and go to state 156


State 126

   43 stmt: IF if_label '(' . expr branch_false ')' stmt
   45     | IF if_label '(' . expr branch_false ')' stmt ELSE @6 stmt

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    expr      go to state 157
    or_expr   go to state 76
    or_list   go to state 77
    and_expr  go to state 78
    and_list  go to state 79
    binary    go to state 80
    unary     go to state 81


State 127

   46 stmt: WHILE '(' expr . ')' stmt

    ')'  shift, and go to state 158


State 128

   47 stmt: FOR '(' expr_e . ';' expr_e ';' expr_e ')' stmt

    ';'  shift, and go to state 159


State 129

   54 expr_e: expr .

    $default  reduce using rule 54 (expr_e)


State 130

   78 unary: '(' expr ')' .

    $default  reduce using rule 78 (unary)


State 131

   79 unary: '(' unary ')' .

    $default  reduce using rule 79 (unary)


State 132

   33 compound_stmt: '{' $@4 local_defs . stmt_list '}'

    $default  reduce using rule 36 (stmt_list)

    stmt_list  go to state 160


State 133

   50 stmt: 'w' '(' STRING . ')'
   83 unary: STRING .

    ')'  shift, and go to state 161

    $default  reduce using rule 83 (unary)


State 134

   51 stmt: 'w' '(' expr . ')'

    ')'  shift, and go to state 162


State 135

   61 or_list: or_list LOGICAL_OR and_expr .

    $default  reduce using rule 61 (or_list)


State 136

   77 binary: unary .
   86 unary: unary . INCOP
   87      | unary . DECOP
   92      | unary . '[' expr ']'
   93      | unary . '.' ID
   94      | unary . STRUCTOP ID
   95      | unary . '(' func_label args ')'
   96      | unary . '(' func_label ')'

    INCOP     shift, and go to state 116
    DECOP     shift, and go to state 117
    STRUCTOP  shift, and go to state 118
    '['       shift, and go to state 120
    '('       shift, and go to state 121
    '.'       shift, and go to state 122

    $default  reduce using rule 77 (binary)


State 137

   64 and_list: and_list LOGICAL_AND binary .
   66 binary: binary . RELOP_LESS binary
   67       | binary . RELOP_LESS_EQUAL binary
   68       | binary . RELOP_GREATER binary
   69       | binary . RELOP_GREATER_EQUAL binary
   70       | binary . EQUOP_EQUAL binary
   71       | binary . EQUOP_NOT_EQUAL binary
   72       | binary . '*' binary
   73       | binary . '/' binary
   74       | binary . '%' binary
   75       | binary . '+' binary
   76       | binary . '-' binary

    RELOP_LESS           shift, and go to state 105
    RELOP_LESS_EQUAL     shift, and go to state 106
    RELOP_GREATER        shift, and go to state 107
    RELOP_GREATER_EQUAL  shift, and go to state 108
    EQUOP_EQUAL          shift, and go to state 109
    EQUOP_NOT_EQUAL      shift, and go to state 110
    '+'                  shift, and go to state 111
    '-'                  shift, and go to state 112
    '*'                  shift, and go to state 113
    '/'                  shift, and go to state 114
    '%'                  shift, and go to state 115

    $default  reduce using rule 64 (and_list)


State 138

   66 binary: binary . RELOP_LESS binary
   66       | binary RELOP_LESS binary .
   67       | binary . RELOP_LESS_EQUAL binary
   68       | binary . RELOP_GREATER binary
   69       | binary . RELOP_GREATER_EQUAL binary
   70       | binary . EQUOP_EQUAL binary
   71       | binary . EQUOP_NOT_EQUAL binary
   72       | binary . '*' binary
   73       | binary . '/' binary
   74       | binary . '%' binary
   75       | binary . '+' binary
   76       | binary . '-' binary

    RELOP_LESS           shift, and go to state 105
    RELOP_LESS_EQUAL     shift, and go to state 106
    RELOP_GREATER        shift, and go to state 107
    RELOP_GREATER_EQUAL  shift, and go to state 108
    EQUOP_EQUAL          shift, and go to state 109
    EQUOP_NOT_EQUAL      shift, and go to state 110
    '+'                  shift, and go to state 111
    '-'                  shift, and go to state 112
    '*'                  shift, and go to state 113
    '/'                  shift, and go to state 114
    '%'                  shift, and go to state 115

    RELOP_LESS           [reduce using rule 66 (binary)]
    RELOP_LESS_EQUAL     [reduce using rule 66 (binary)]
    RELOP_GREATER        [reduce using rule 66 (binary)]
    RELOP_GREATER_EQUAL  [reduce using rule 66 (binary)]
    EQUOP_EQUAL          [reduce using rule 66 (binary)]
    EQUOP_NOT_EQUAL      [reduce using rule 66 (binary)]
    '+'                  [reduce using rule 66 (binary)]
    '-'                  [reduce using rule 66 (binary)]
    '*'                  [reduce using rule 66 (binary)]
    '/'                  [reduce using rule 66 (binary)]
    '%'                  [reduce using rule 66 (binary)]
    $default             reduce using rule 66 (binary)


State 139

   66 binary: binary . RELOP_LESS binary
   67       | binary . RELOP_LESS_EQUAL binary
   67       | binary RELOP_LESS_EQUAL binary .
   68       | binary . RELOP_GREATER binary
   69       | binary . RELOP_GREATER_EQUAL binary
   70       | binary . EQUOP_EQUAL binary
   71       | binary . EQUOP_NOT_EQUAL binary
   72       | binary . '*' binary
   73       | binary . '/' binary
   74       | binary . '%' binary
   75       | binary . '+' binary
   76       | binary . '-' binary

    RELOP_LESS           shift, and go to state 105
    RELOP_LESS_EQUAL     shift, and go to state 106
    RELOP_GREATER        shift, and go to state 107
    RELOP_GREATER_EQUAL  shift, and go to state 108
    EQUOP_EQUAL          shift, and go to state 109
    EQUOP_NOT_EQUAL      shift, and go to state 110
    '+'                  shift, and go to state 111
    '-'                  shift, and go to state 112
    '*'                  shift, and go to state 113
    '/'                  shift, and go to state 114
    '%'                  shift, and go to state 115

    RELOP_LESS           [reduce using rule 67 (binary)]
    RELOP_LESS_EQUAL     [reduce using rule 67 (binary)]
    RELOP_GREATER        [reduce using rule 67 (binary)]
    RELOP_GREATER_EQUAL  [reduce using rule 67 (binary)]
    EQUOP_EQUAL          [reduce using rule 67 (binary)]
    EQUOP_NOT_EQUAL      [reduce using rule 67 (binary)]
    '+'                  [reduce using rule 67 (binary)]
    '-'                  [reduce using rule 67 (binary)]
    '*'                  [reduce using rule 67 (binary)]
    '/'                  [reduce using rule 67 (binary)]
    '%'                  [reduce using rule 67 (binary)]
    $default             reduce using rule 67 (binary)


State 140

   66 binary: binary . RELOP_LESS binary
   67       | binary . RELOP_LESS_EQUAL binary
   68       | binary . RELOP_GREATER binary
   68       | binary RELOP_GREATER binary .
   69       | binary . RELOP_GREATER_EQUAL binary
   70       | binary . EQUOP_EQUAL binary
   71       | binary . EQUOP_NOT_EQUAL binary
   72       | binary . '*' binary
   73       | binary . '/' binary
   74       | binary . '%' binary
   75       | binary . '+' binary
   76       | binary . '-' binary

    RELOP_LESS           shift, and go to state 105
    RELOP_LESS_EQUAL     shift, and go to state 106
    RELOP_GREATER        shift, and go to state 107
    RELOP_GREATER_EQUAL  shift, and go to state 108
    EQUOP_EQUAL          shift, and go to state 109
    EQUOP_NOT_EQUAL      shift, and go to state 110
    '+'                  shift, and go to state 111
    '-'                  shift, and go to state 112
    '*'                  shift, and go to state 113
    '/'                  shift, and go to state 114
    '%'                  shift, and go to state 115

    RELOP_LESS           [reduce using rule 68 (binary)]
    RELOP_LESS_EQUAL     [reduce using rule 68 (binary)]
    RELOP_GREATER        [reduce using rule 68 (binary)]
    RELOP_GREATER_EQUAL  [reduce using rule 68 (binary)]
    EQUOP_EQUAL          [reduce using rule 68 (binary)]
    EQUOP_NOT_EQUAL      [reduce using rule 68 (binary)]
    '+'                  [reduce using rule 68 (binary)]
    '-'                  [reduce using rule 68 (binary)]
    '*'                  [reduce using rule 68 (binary)]
    '/'                  [reduce using rule 68 (binary)]
    '%'                  [reduce using rule 68 (binary)]
    $default             reduce using rule 68 (binary)


State 141

   66 binary: binary . RELOP_LESS binary
   67       | binary . RELOP_LESS_EQUAL binary
   68       | binary . RELOP_GREATER binary
   69       | binary . RELOP_GREATER_EQUAL binary
   69       | binary RELOP_GREATER_EQUAL binary .
   70       | binary . EQUOP_EQUAL binary
   71       | binary . EQUOP_NOT_EQUAL binary
   72       | binary . '*' binary
   73       | binary . '/' binary
   74       | binary . '%' binary
   75       | binary . '+' binary
   76       | binary . '-' binary

    RELOP_LESS           shift, and go to state 105
    RELOP_LESS_EQUAL     shift, and go to state 106
    RELOP_GREATER        shift, and go to state 107
    RELOP_GREATER_EQUAL  shift, and go to state 108
    EQUOP_EQUAL          shift, and go to state 109
    EQUOP_NOT_EQUAL      shift, and go to state 110
    '+'                  shift, and go to state 111
    '-'                  shift, and go to state 112
    '*'                  shift, and go to state 113
    '/'                  shift, and go to state 114
    '%'                  shift, and go to state 115

    RELOP_LESS           [reduce using rule 69 (binary)]
    RELOP_LESS_EQUAL     [reduce using rule 69 (binary)]
    RELOP_GREATER        [reduce using rule 69 (binary)]
    RELOP_GREATER_EQUAL  [reduce using rule 69 (binary)]
    EQUOP_EQUAL          [reduce using rule 69 (binary)]
    EQUOP_NOT_EQUAL      [reduce using rule 69 (binary)]
    '+'                  [reduce using rule 69 (binary)]
    '-'                  [reduce using rule 69 (binary)]
    '*'                  [reduce using rule 69 (binary)]
    '/'                  [reduce using rule 69 (binary)]
    '%'                  [reduce using rule 69 (binary)]
    $default             reduce using rule 69 (binary)


State 142

   66 binary: binary . RELOP_LESS binary
   67       | binary . RELOP_LESS_EQUAL binary
   68       | binary . RELOP_GREATER binary
   69       | binary . RELOP_GREATER_EQUAL binary
   70       | binary . EQUOP_EQUAL binary
   70       | binary EQUOP_EQUAL binary .
   71       | binary . EQUOP_NOT_EQUAL binary
   72       | binary . '*' binary
   73       | binary . '/' binary
   74       | binary . '%' binary
   75       | binary . '+' binary
   76       | binary . '-' binary

    RELOP_LESS           shift, and go to state 105
    RELOP_LESS_EQUAL     shift, and go to state 106
    RELOP_GREATER        shift, and go to state 107
    RELOP_GREATER_EQUAL  shift, and go to state 108
    EQUOP_EQUAL          shift, and go to state 109
    EQUOP_NOT_EQUAL      shift, and go to state 110
    '+'                  shift, and go to state 111
    '-'                  shift, and go to state 112
    '*'                  shift, and go to state 113
    '/'                  shift, and go to state 114
    '%'                  shift, and go to state 115

    RELOP_LESS           [reduce using rule 70 (binary)]
    RELOP_LESS_EQUAL     [reduce using rule 70 (binary)]
    RELOP_GREATER        [reduce using rule 70 (binary)]
    RELOP_GREATER_EQUAL  [reduce using rule 70 (binary)]
    EQUOP_EQUAL          [reduce using rule 70 (binary)]
    EQUOP_NOT_EQUAL      [reduce using rule 70 (binary)]
    '+'                  [reduce using rule 70 (binary)]
    '-'                  [reduce using rule 70 (binary)]
    '*'                  [reduce using rule 70 (binary)]
    '/'                  [reduce using rule 70 (binary)]
    '%'                  [reduce using rule 70 (binary)]
    $default             reduce using rule 70 (binary)


State 143

   66 binary: binary . RELOP_LESS binary
   67       | binary . RELOP_LESS_EQUAL binary
   68       | binary . RELOP_GREATER binary
   69       | binary . RELOP_GREATER_EQUAL binary
   70       | binary . EQUOP_EQUAL binary
   71       | binary . EQUOP_NOT_EQUAL binary
   71       | binary EQUOP_NOT_EQUAL binary .
   72       | binary . '*' binary
   73       | binary . '/' binary
   74       | binary . '%' binary
   75       | binary . '+' binary
   76       | binary . '-' binary

    RELOP_LESS           shift, and go to state 105
    RELOP_LESS_EQUAL     shift, and go to state 106
    RELOP_GREATER        shift, and go to state 107
    RELOP_GREATER_EQUAL  shift, and go to state 108
    EQUOP_EQUAL          shift, and go to state 109
    EQUOP_NOT_EQUAL      shift, and go to state 110
    '+'                  shift, and go to state 111
    '-'                  shift, and go to state 112
    '*'                  shift, and go to state 113
    '/'                  shift, and go to state 114
    '%'                  shift, and go to state 115

    RELOP_LESS           [reduce using rule 71 (binary)]
    RELOP_LESS_EQUAL     [reduce using rule 71 (binary)]
    RELOP_GREATER        [reduce using rule 71 (binary)]
    RELOP_GREATER_EQUAL  [reduce using rule 71 (binary)]
    EQUOP_EQUAL          [reduce using rule 71 (binary)]
    EQUOP_NOT_EQUAL      [reduce using rule 71 (binary)]
    '+'                  [reduce using rule 71 (binary)]
    '-'                  [reduce using rule 71 (binary)]
    '*'                  [reduce using rule 71 (binary)]
    '/'                  [reduce using rule 71 (binary)]
    '%'                  [reduce using rule 71 (binary)]
    $default             reduce using rule 71 (binary)


State 144

   66 binary: binary . RELOP_LESS binary
   67       | binary . RELOP_LESS_EQUAL binary
   68       | binary . RELOP_GREATER binary
   69       | binary . RELOP_GREATER_EQUAL binary
   70       | binary . EQUOP_EQUAL binary
   71       | binary . EQUOP_NOT_EQUAL binary
   72       | binary . '*' binary
   73       | binary . '/' binary
   74       | binary . '%' binary
   75       | binary . '+' binary
   75       | binary '+' binary .
   76       | binary . '-' binary

    RELOP_LESS           shift, and go to state 105
    RELOP_LESS_EQUAL     shift, and go to state 106
    RELOP_GREATER        shift, and go to state 107
    RELOP_GREATER_EQUAL  shift, and go to state 108
    EQUOP_EQUAL          shift, and go to state 109
    EQUOP_NOT_EQUAL      shift, and go to state 110
    '*'                  shift, and go to state 113
    '/'                  shift, and go to state 114
    '%'                  shift, and go to state 115

    RELOP_LESS           [reduce using rule 75 (binary)]
    RELOP_LESS_EQUAL     [reduce using rule 75 (binary)]
    RELOP_GREATER        [reduce using rule 75 (binary)]
    RELOP_GREATER_EQUAL  [reduce using rule 75 (binary)]
    EQUOP_EQUAL          [reduce using rule 75 (binary)]
    EQUOP_NOT_EQUAL      [reduce using rule 75 (binary)]
    $default             reduce using rule 75 (binary)


State 145

   66 binary: binary . RELOP_LESS binary
   67       | binary . RELOP_LESS_EQUAL binary
   68       | binary . RELOP_GREATER binary
   69       | binary . RELOP_GREATER_EQUAL binary
   70       | binary . EQUOP_EQUAL binary
   71       | binary . EQUOP_NOT_EQUAL binary
   72       | binary . '*' binary
   73       | binary . '/' binary
   74       | binary . '%' binary
   75       | binary . '+' binary
   76       | binary . '-' binary
   76       | binary '-' binary .

    RELOP_LESS           shift, and go to state 105
    RELOP_LESS_EQUAL     shift, and go to state 106
    RELOP_GREATER        shift, and go to state 107
    RELOP_GREATER_EQUAL  shift, and go to state 108
    EQUOP_EQUAL          shift, and go to state 109
    EQUOP_NOT_EQUAL      shift, and go to state 110
    '*'                  shift, and go to state 113
    '/'                  shift, and go to state 114
    '%'                  shift, and go to state 115

    RELOP_LESS           [reduce using rule 76 (binary)]
    RELOP_LESS_EQUAL     [reduce using rule 76 (binary)]
    RELOP_GREATER        [reduce using rule 76 (binary)]
    RELOP_GREATER_EQUAL  [reduce using rule 76 (binary)]
    EQUOP_EQUAL          [reduce using rule 76 (binary)]
    EQUOP_NOT_EQUAL      [reduce using rule 76 (binary)]
    $default             reduce using rule 76 (binary)


State 146

   66 binary: binary . RELOP_LESS binary
   67       | binary . RELOP_LESS_EQUAL binary
   68       | binary . RELOP_GREATER binary
   69       | binary . RELOP_GREATER_EQUAL binary
   70       | binary . EQUOP_EQUAL binary
   71       | binary . EQUOP_NOT_EQUAL binary
   72       | binary . '*' binary
   72       | binary '*' binary .
   73       | binary . '/' binary
   74       | binary . '%' binary
   75       | binary . '+' binary
   76       | binary . '-' binary

    RELOP_LESS           shift, and go to state 105
    RELOP_LESS_EQUAL     shift, and go to state 106
    RELOP_GREATER        shift, and go to state 107
    RELOP_GREATER_EQUAL  shift, and go to state 108
    EQUOP_EQUAL          shift, and go to state 109
    EQUOP_NOT_EQUAL      shift, and go to state 110

    RELOP_LESS           [reduce using rule 72 (binary)]
    RELOP_LESS_EQUAL     [reduce using rule 72 (binary)]
    RELOP_GREATER        [reduce using rule 72 (binary)]
    RELOP_GREATER_EQUAL  [reduce using rule 72 (binary)]
    EQUOP_EQUAL          [reduce using rule 72 (binary)]
    EQUOP_NOT_EQUAL      [reduce using rule 72 (binary)]
    $default             reduce using rule 72 (binary)


State 147

   66 binary: binary . RELOP_LESS binary
   67       | binary . RELOP_LESS_EQUAL binary
   68       | binary . RELOP_GREATER binary
   69       | binary . RELOP_GREATER_EQUAL binary
   70       | binary . EQUOP_EQUAL binary
   71       | binary . EQUOP_NOT_EQUAL binary
   72       | binary . '*' binary
   73       | binary . '/' binary
   73       | binary '/' binary .
   74       | binary . '%' binary
   75       | binary . '+' binary
   76       | binary . '-' binary

    RELOP_LESS           shift, and go to state 105
    RELOP_LESS_EQUAL     shift, and go to state 106
    RELOP_GREATER        shift, and go to state 107
    RELOP_GREATER_EQUAL  shift, and go to state 108
    EQUOP_EQUAL          shift, and go to state 109
    EQUOP_NOT_EQUAL      shift, and go to state 110

    RELOP_LESS           [reduce using rule 73 (binary)]
    RELOP_LESS_EQUAL     [reduce using rule 73 (binary)]
    RELOP_GREATER        [reduce using rule 73 (binary)]
    RELOP_GREATER_EQUAL  [reduce using rule 73 (binary)]
    EQUOP_EQUAL          [reduce using rule 73 (binary)]
    EQUOP_NOT_EQUAL      [reduce using rule 73 (binary)]
    $default             reduce using rule 73 (binary)


State 148

   66 binary: binary . RELOP_LESS binary
   67       | binary . RELOP_LESS_EQUAL binary
   68       | binary . RELOP_GREATER binary
   69       | binary . RELOP_GREATER_EQUAL binary
   70       | binary . EQUOP_EQUAL binary
   71       | binary . EQUOP_NOT_EQUAL binary
   72       | binary . '*' binary
   73       | binary . '/' binary
   74       | binary . '%' binary
   74       | binary '%' binary .
   75       | binary . '+' binary
   76       | binary . '-' binary

    RELOP_LESS           shift, and go to state 105
    RELOP_LESS_EQUAL     shift, and go to state 106
    RELOP_GREATER        shift, and go to state 107
    RELOP_GREATER_EQUAL  shift, and go to state 108
    EQUOP_EQUAL          shift, and go to state 109
    EQUOP_NOT_EQUAL      shift, and go to state 110

    RELOP_LESS           [reduce using rule 74 (binary)]
    RELOP_LESS_EQUAL     [reduce using rule 74 (binary)]
    RELOP_GREATER        [reduce using rule 74 (binary)]
    RELOP_GREATER_EQUAL  [reduce using rule 74 (binary)]
    EQUOP_EQUAL          [reduce using rule 74 (binary)]
    EQUOP_NOT_EQUAL      [reduce using rule 74 (binary)]
    $default             reduce using rule 74 (binary)


State 149

   94 unary: unary STRUCTOP ID .

    $default  reduce using rule 94 (unary)


State 150

   58 expr: unary '=' $@7 . expr

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    expr      go to state 163
    or_expr   go to state 76
    or_list   go to state 77
    and_expr  go to state 78
    and_list  go to state 79
    binary    go to state 80
    unary     go to state 81


State 151

   92 unary: unary '[' expr . ']'

    ']'  shift, and go to state 164


State 152

   95 unary: unary '(' func_label . args ')'
   96      | unary '(' func_label . ')'

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68
    ')'            shift, and go to state 165

    expr      go to state 166
    or_expr   go to state 76
    or_list   go to state 77
    and_expr  go to state 78
    and_list  go to state 79
    binary    go to state 80
    unary     go to state 81
    args      go to state 167


State 153

   93 unary: unary '.' ID .

    $default  reduce using rule 93 (unary)


State 154

   25 param_decl: type_specifier pointers ID '[' const_expr ']' .

    $default  reduce using rule 25 (param_decl)


State 155

   29 def: type_specifier pointers ID '[' const_expr ']' . ';'

    ';'  shift, and go to state 168


State 156

   41 stmt: RETURN $@5 expr ';' .

    $default  reduce using rule 41 (stmt)


State 157

   43 stmt: IF if_label '(' expr . branch_false ')' stmt
   45     | IF if_label '(' expr . branch_false ')' stmt ELSE @6 stmt

    $default  reduce using rule 53 (branch_false)

    branch_false  go to state 169


State 158

   46 stmt: WHILE '(' expr ')' . stmt

    RETURN         shift, and go to state 52
    IF             shift, and go to state 53
    WHILE          shift, and go to state 54
    FOR            shift, and go to state 55
    BREAK          shift, and go to state 56
    CONTINUE       shift, and go to state 57
    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68
    ';'            shift, and go to state 69
    '{'            shift, and go to state 70
    'w'            shift, and go to state 72

    compound_stmt  go to state 73
    stmt           go to state 170
    expr           go to state 75
    or_expr        go to state 76
    or_list        go to state 77
    and_expr       go to state 78
    and_list       go to state 79
    binary         go to state 80
    unary          go to state 81


State 159

   47 stmt: FOR '(' expr_e ';' . expr_e ';' expr_e ')' stmt

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    $default  reduce using rule 55 (expr_e)

    expr_e    go to state 171
    expr      go to state 129
    or_expr   go to state 76
    or_list   go to state 77
    and_expr  go to state 78
    and_list  go to state 79
    binary    go to state 80
    unary     go to state 81


State 160

   33 compound_stmt: '{' $@4 local_defs stmt_list . '}'
   35 stmt_list: stmt_list . stmt

    RETURN         shift, and go to state 52
    IF             shift, and go to state 53
    WHILE          shift, and go to state 54
    FOR            shift, and go to state 55
    BREAK          shift, and go to state 56
    CONTINUE       shift, and go to state 57
    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68
    ';'            shift, and go to state 69
    '{'            shift, and go to state 70
    '}'            shift, and go to state 172
    'w'            shift, and go to state 72

    compound_stmt  go to state 73
    stmt           go to state 74
    expr           go to state 75
    or_expr        go to state 76
    or_list        go to state 77
    and_expr       go to state 78
    and_list       go to state 79
    binary         go to state 80
    unary          go to state 81


State 161

   50 stmt: 'w' '(' STRING ')' .

    $default  reduce using rule 50 (stmt)


State 162

   51 stmt: 'w' '(' expr ')' .

    $default  reduce using rule 51 (stmt)


State 163

   58 expr: unary '=' $@7 expr .

    $default  reduce using rule 58 (expr)


State 164

   92 unary: unary '[' expr ']' .

    $default  reduce using rule 92 (unary)


State 165

   96 unary: unary '(' func_label ')' .

    $default  reduce using rule 96 (unary)


State 166

   98 args: expr .

    $default  reduce using rule 98 (args)


State 167

   95 unary: unary '(' func_label args . ')'
   99 args: args . ',' expr

    ','  shift, and go to state 173
    ')'  shift, and go to state 174


State 168

   29 def: type_specifier pointers ID '[' const_expr ']' ';' .

    $default  reduce using rule 29 (def)


State 169

   43 stmt: IF if_label '(' expr branch_false . ')' stmt
   45     | IF if_label '(' expr branch_false . ')' stmt ELSE @6 stmt

    ')'  shift, and go to state 175


State 170

   46 stmt: WHILE '(' expr ')' stmt .

    $default  reduce using rule 46 (stmt)


State 171

   47 stmt: FOR '(' expr_e ';' expr_e . ';' expr_e ')' stmt

    ';'  shift, and go to state 176


State 172

   33 compound_stmt: '{' $@4 local_defs stmt_list '}' .

    $default  reduce using rule 33 (compound_stmt)


State 173

   99 args: args ',' . expr

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    expr      go to state 177
    or_expr   go to state 76
    or_list   go to state 77
    and_expr  go to state 78
    and_list  go to state 79
    binary    go to state 80
    unary     go to state 81


State 174

   95 unary: unary '(' func_label args ')' .

    $default  reduce using rule 95 (unary)


State 175

   43 stmt: IF if_label '(' expr branch_false ')' . stmt
   45     | IF if_label '(' expr branch_false ')' . stmt ELSE @6 stmt

    RETURN         shift, and go to state 52
    IF             shift, and go to state 53
    WHILE          shift, and go to state 54
    FOR            shift, and go to state 55
    BREAK          shift, and go to state 56
    CONTINUE       shift, and go to state 57
    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68
    ';'            shift, and go to state 69
    '{'            shift, and go to state 70
    'w'            shift, and go to state 72

    compound_stmt  go to state 73
    stmt           go to state 178
    expr           go to state 75
    or_expr        go to state 76
    or_list        go to state 77
    and_expr       go to state 78
    and_list       go to state 79
    binary         go to state 80
    unary          go to state 81


State 176

   47 stmt: FOR '(' expr_e ';' expr_e ';' . expr_e ')' stmt

    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68

    $default  reduce using rule 55 (expr_e)

    expr_e    go to state 179
    expr      go to state 129
    or_expr   go to state 76
    or_list   go to state 77
    and_expr  go to state 78
    and_list  go to state 79
    binary    go to state 80
    unary     go to state 81


State 177

   99 args: args ',' expr .

    $default  reduce using rule 99 (args)


State 178

   43 stmt: IF if_label '(' expr branch_false ')' stmt .
   45     | IF if_label '(' expr branch_false ')' stmt . ELSE @6 stmt

    ELSE  shift, and go to state 180

    $default  reduce using rule 43 (stmt)


State 179

   47 stmt: FOR '(' expr_e ';' expr_e ';' expr_e . ')' stmt

    ')'  shift, and go to state 181


State 180

   45 stmt: IF if_label '(' expr branch_false ')' stmt ELSE . @6 stmt

    $default  reduce using rule 44 (@6)

    @6  go to state 182


State 181

   47 stmt: FOR '(' expr_e ';' expr_e ';' expr_e ')' . stmt

    RETURN         shift, and go to state 52
    IF             shift, and go to state 53
    WHILE          shift, and go to state 54
    FOR            shift, and go to state 55
    BREAK          shift, and go to state 56
    CONTINUE       shift, and go to state 57
    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68
    ';'            shift, and go to state 69
    '{'            shift, and go to state 70
    'w'            shift, and go to state 72

    compound_stmt  go to state 73
    stmt           go to state 183
    expr           go to state 75
    or_expr        go to state 76
    or_list        go to state 77
    and_expr       go to state 78
    and_list       go to state 79
    binary         go to state 80
    unary          go to state 81


State 182

   45 stmt: IF if_label '(' expr branch_false ')' stmt ELSE @6 . stmt

    RETURN         shift, and go to state 52
    IF             shift, and go to state 53
    WHILE          shift, and go to state 54
    FOR            shift, and go to state 55
    BREAK          shift, and go to state 56
    CONTINUE       shift, and go to state 57
    INCOP          shift, and go to state 58
    DECOP          shift, and go to state 59
    ID             shift, and go to state 60
    INTEGER_CONST  shift, and go to state 61
    STRING         shift, and go to state 62
    CHAR_CONST     shift, and go to state 63
    '&'            shift, and go to state 64
    '-'            shift, and go to state 65
    '*'            shift, and go to state 66
    '!'            shift, and go to state 67
    '('            shift, and go to state 68
    ';'            shift, and go to state 69
    '{'            shift, and go to state 70
    'w'            shift, and go to state 72

    compound_stmt  go to state 73
    stmt           go to state 184
    expr           go to state 75
    or_expr        go to state 76
    or_list        go to state 77
    and_expr       go to state 78
    and_list       go to state 79
    binary         go to state 80
    unary          go to state 81


State 183

   47 stmt: FOR '(' expr_e ';' expr_e ';' expr_e ')' stmt .

    $default  reduce using rule 47 (stmt)


State 184

   45 stmt: IF if_label '(' expr branch_false ')' stmt ELSE @6 stmt .

    $default  reduce using rule 45 (stmt)

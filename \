%{
/*
 * File Name   : subc.y
 * Description : a skeleton bison input
 */

#include "subc.h"

int    yylex ();
int    yyerror (char* s);
void 	REDUCE(char* s);

%}

/* yylval types */
%union {
	int		intVal;
	char		*stringVal;
	struct id	*idPtr;
	struct decl	*declPtr;
	struct ste	*stePtr;
	struct node 	*nodePtr;
}

/* Token and Types */
%token	<stringVal>	TYPE VOID STRUCT RETURN IF ELSE WHILE FOR BREAK CONTINUE LOGICAL_OR LOGICAL_AND RELOP EQUOP INCOP DECOP STRUCTOP
%token	<idPtr>		ID
%token	<intVal>	INTEGER_CONST
%token	<stringVal>	STRING CHAR_CONST

%type	<declPtr>	program	ext_def_list ext_def type_specifier struct_specifier func_decl param_list param_decl def_list def compound_stmt local_defs stmt_list stmt expr_e const_expr expr or_expr or_list and_expr and_list binary unary
%type	<nodePtr>	args		
%type 	<intVal>	pointers

/* Precedences and Associativities */	
%nonassoc	IFSIMPLE
%nonassoc	ELSE
%left	','
%right	'='
%left	LOGICAL_OR
%left	LOGICAL_AND	
%left	'&'
%left	EQUOP
%left	RELOP
%left	'+' '-'
%left	'*'
%right	'!' INCOP DECOP 
%left 	'[' ']' '(' ')' '.' STRUCTOP

%%
program:	ext_def_list	{
            REDUCE("program->ext_def_list");
        }
   ;
ext_def_list:	ext_def_list ext_def	{
            REDUCE("ext_def_list->ext_def_list ext_def");
        }
		| /* empty */	{
            REDUCE("ext_def_list->epsilon");
        }
   ;

ext_def:	type_specifier pointers ID ';' {
            REDUCE("ext_def->type_specifier pointers ID ';' ");
		printf("%d\n", $1->typeClass);
		//1. TYPE *ID; 
		if($2 == 1){
			declare($3, makeVarDecl(makePtrDecl($1)));
		}
		//2. TYPE ID;
		else{
			declare($3, makeVarDecl($1));
		}	
	}

		| type_specifier pointers ID '[' const_expr ']' ';' {
            REDUCE("ext_def->type_specifier pointers ID '[' const_expr ']' ';' ");
		if($2 == 1){
			declare($3, makeVarDecl(makePtrDecl($1)));
		}else{
			declare($3, makeConstDecl(makeArrDecl($5, makeVarDecl($1)),0));
		}	
	}
		| func_decl ';' {
            REDUCE("ext_def->func_decl ';' ");
		//do nothing
	}
		| type_specifier ';' {
            REDUCE("ext_def->type_specifier ';' ");
		//do nothing
	}
		| func_decl compound_stmt {
            REDUCE("ext_def->func_decl compound_stmt ");
	}
   ;
type_specifier:	TYPE	{
            REDUCE("type_specifier->TYPE");
		//find ste for TYPE.
		printf("TYPE : %s\n",$1); 
		if(enter(0, $1, strlen($1))) printf("found.\n"); 
		struct ste* typeSte = lookupSymbol(enter(0, $1, strlen($1)));
		//save type decl ptr.
		printf("%d\n", typeSte->decl->typeClass);
		$$ = typeSte->decl;	
        }
		| VOID	{
            REDUCE("type_specifier->VOID");
		//find ste for VOID.
		struct ste* typeSte = lookupSymbol(enter(0, $1, strlen($1)));
		//save type decl ptr.
		$$ = typeSte->decl;
	}
		| struct_specifier	{
            REDUCE("type_specifier->struct_specifier");
		//save struct decl ptr.
		$$ = $1;
        }
   ;
struct_specifier: STRUCT ID '{' def_list '}'	{
            REDUCE("struct_specifier->STRUCT ID '{' def_list '}'");
        }
		| STRUCT ID	{
            REDUCE("struct_specifier->STRUCT ID ");
        }
   ;	//<= In the second case, the struct must have been defined before.
func_decl:	type_specifier pointers ID '(' ')'	{
            REDUCE("funct_decl->type_specifier pointers ID '(' ')'");
        }
		| type_specifier pointers ID '(' VOID ')'	{
            REDUCE("funct_decl->type_specifier pointers ID '(' VOID ')'");
        }
		| type_specifier pointers ID '(' param_list ')'	{
            REDUCE("funct_decl->type_specifier pointers ID '(' param_list ')'");
        }
   ;
pointers: 	'*'	{
            REDUCE("pointers->'*'");
		$$ = 1;
	}
		| /* empty */ {
            REDUCE("pointers->epsilon");
		$$ = 0;
	}
   ;
param_list:	param_decl	{
            REDUCE("param_list->param_decl");
	}
		| param_list ',' param_decl	{
            REDUCE("param_list->param_list ',' param_decl");
	}
   ;
param_decl: type_specifier pointers ID	{
            REDUCE("param_decl -> type_specifier pointers ID");
	}
		| type_specifier pointers ID '[' const_expr ']'	{
            REDUCE("param_decl -> type_specifier pointers ID '[' const_expr ']'	");
	}
   ;
def_list:	def_list def	{
            REDUCE("def_list->def_list def");
        }
		| /* empty */	{
            REDUCE("def_list->epsilon");
        }
   ;
def:	type_specifier pointers ID ';'	{
            REDUCE("def->type_specifier pointers ID ';'	");
        }
		| type_specifier pointers ID '[' const_expr ']' ';'	{
            REDUCE("def->type_specifier pointers ID '[' const_expr ']' ';'");
        }
		| type_specifier ';'	{
            REDUCE("def->type_specifier ';'");
        }
		| func_decl ';'	{
            REDUCE("def->func_decl ';'	");
        }
   ;
compound_stmt:	'{' local_defs stmt_list '}'	{
            REDUCE("compound_stmt->'{' local_defs stmt_list '}'");
        }
   ;
local_defs:	def_list	{
            REDUCE("local_defs->def_list");
        }
   ;
stmt_list:	stmt_list stmt{
            REDUCE("stmt_list->stmt_list stmt");
        }
		| /* empty */	{
            REDUCE("stmt_list->epsilon");
        }
   ;
stmt:		expr ';'	{
            REDUCE("stmt->expr ';'");
        }
		| compound_stmt	{
            REDUCE("stmt->compound_stmt");
        }
		| RETURN ';'	{
            REDUCE("stmt->RETURN ';'");
        }
		| RETURN expr ';'	{
            REDUCE("stmt->RETURN expr ';'");
        }
		| ';'	{
            REDUCE("stmt->';'");
        }
		| IF '(' expr ')' stmt %prec IFSIMPLE	{
            REDUCE("stmt->IF '(' expr ')' stmt	");
        }
		| IF '(' expr ')' stmt ELSE stmt %prec ELSE{
            REDUCE("stmt->IF '(' expr ')' stmt ELSE stmt");
        }
		| WHILE '(' expr ')' stmt	{
            REDUCE("stmt->WHILE '(' expr ')' stmt");
        }
		| FOR '(' expr_e ';' expr_e ';' expr_e ')' stmt	{
            REDUCE("stmt->FOR '(' expr_e ';' expr_e ';' expr_e ')' stmt");
        }
		| BREAK ';'	{
            REDUCE("stmt->BREAK ';'");
        }
		| CONTINUE ';'		{
            REDUCE("stmt->CONTINUE ';'");
        }
   ;
expr_e:		expr	{
            REDUCE("test->expr");
        }
		| /* empty */		{
            REDUCE("test->epsilon");
        }
   ;
const_expr:	expr	{
            REDUCE("const_expr->expr");
        }
   ;
expr:		unary '=' expr	{
            REDUCE("expr->unary '=' expr");
        }
		| or_expr	{
            REDUCE("expr->or_expr");
        }
   ;
or_expr:	or_list		{
            REDUCE("or_expr->or_list");
        }
   ;
or_list:	or_list LOGICAL_OR and_expr	{
            REDUCE("or_list->or_list LOGICAL_OR and_expr");
        }
		| and_expr	{
            REDUCE("or_list->and_expr");
        }
   ;
and_expr:	and_list	{
            REDUCE("and_expr->and_list");
        }
   ;
and_list:	and_list LOGICAL_AND binary	{
            REDUCE("and_list->and_list LOGICAL_AND binary");
        }
		| binary	{
            REDUCE("and_list->binary");
        }
   ;
binary:		binary RELOP binary	{
            REDUCE("binary->binary RELOP binary");
        }
		| binary EQUOP binary	{
            REDUCE("binary->binary EQUOP binary");
        }
		| binary '+' binary	{
            REDUCE("binary->binary '+' binary");
        }
		| binary '-' binary	{
            REDUCE("binary->binary '-' binary");
        }
		| unary	%prec '='	{
            REDUCE("binary->unary");
        }
   ;
unary:		'(' expr ')'	{
            REDUCE("unary->'(' expr ')'");
		
        }
		| '(' unary ')'	{
            REDUCE("unary->'(' unary ')'");
        }
		| INTEGER_CONST	{
            REDUCE("unary->INTEGER_CONST");
		$$ = makeConstDecl(NULL, $1);	
        }
		| CHAR_CONST	{
            REDUCE("unary->CHAR_CONST");
		$$ = makeCharConstDecl($1);	
        }
		| ID	{
            //printf("unary->ID %s \n", $1);
            REDUCE("unary->ID");
		$$ = findDecl($1);
        }
		| STRING	{
            //printf("unary->STRING %s \n", $1);
            REDUCE("unary->STRING");
		$$ = makeCharConstDecl($1);	
        }
		| '-' unary %prec '!'	{
            REDUCE("unary->'-' unary");
        }
		| '!' unary  {
            REDUCE("unary->'!' unary");
        }
		| unary INCOP {
            REDUCE("unary->unary INCOP");
        }
		| unary DECOP	{
            REDUCE("unary->unary DECOP");
        }	
		| INCOP unary {
            REDUCE("unary->INCOP unary ");
        }
		| DECOP unary {
            REDUCE("unary->DECOP unary ");
        }
		| '&' unary %prec '!'	{
            REDUCE("unary->'&' unary");
        }
		| '*' unary %prec '!'	{
            REDUCE("unary->'*' unary");
        }		//<= The type of unary is pointer.
		| unary '[' expr ']'	{
            REDUCE("unary->unary '[' expr ']'");
        }//	<= The type of expr is integer.
		| unary '.' ID	{
            REDUCE("unary->unary '.' ID");
        }//	<= The type of unary is a struct.
		| unary STRUCTOP ID	{
            REDUCE("unary->unary STRUCTOP ID");
        }//	<= The type of unary is a struct.
		| unary '(' args ')' {
            REDUCE("unary->unary '(' args ')'");
        }//	<= The type of unary is a function.
		| unary '(' ')'	{
            REDUCE("unary->unary '(' ')'");
        }
   ;
args:		expr	{
            REDUCE("args->expr");
        }
		| args ',' expr		{
            REDUCE("args->args ',' expr");
        }
   ;
%%

/*  Additional C Codes 
 	Implemnt REDUCE function here */

int    yyerror (char* s)
{
	printf ("lineNo : %d\n", read_line()); 
	fprintf (stderr, "%s\n", s);
}

void 	REDUCE( char* s)
{
	printf("%s\n",s);
}

